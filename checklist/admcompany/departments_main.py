import streamlit as st
import pandas as pd
from typing import Optional, Iterable

from checklist.db.db import SessionLocal
from checklist.db.models import Department, User, Position, Checklist


# ---------- helpers ----------
def _dep_users(db, dep_id: int) -> list[User]:
    dep = db.query(Department).get(dep_id)
    if not dep:
        return []
    return list(dep.users or [])

def _dep_positions(db, dep_id: int) -> list[Position]:
    users = _dep_users(db, dep_id)
    pos_ids = {u.position_id for u in users if u.position_id}
    if not pos_ids:
        return []
    return db.query(Position).filter(Position.id.in_(pos_ids)).all()

def _union_checklists(positions: Iterable[Position]) -> list[Checklist]:
    seen = {}
    for p in positions:
        for cl in (p.checklists or []):
            seen[cl.id] = cl
    return list(seen.values())

def _create_or_update_department(db, company_id: int, dep_id: Optional[int], name: str) -> Department:
    name = (name or "").strip()
    if not name:
        raise ValueError("–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")

    if dep_id:
        dep = db.query(Department).get(dep_id)
        if not dep:
            raise ValueError("–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        dep.name = name
        db.commit()
        return dep

    # check duplicate in company
    exists = db.query(Department).filter(
        Department.company_id == company_id,
        Department.name == name
    ).first()
    if exists:
        raise ValueError("–¢–∞–∫–æ–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —ç—Ç–æ–π –∫–æ–º–ø–∞–Ω–∏–∏")

    dep = Department(company_id=company_id, name=name)
    db.add(dep)
    db.commit()
    db.refresh(dep)
    return dep


# ---------- modal wrapper (Streamlit >=1.31) ----------
def _modal(title: str):
    if hasattr(st, "dialog"):
        return st.dialog(title)
    # fallback: simple expander wrapper (–≤–∏–∑—É–∞–ª—å–Ω–æ –Ω–µ –º–æ–¥–∞–ª–∫–∞, –Ω–æ UX —Å–æ—Ö—Ä–∞–Ω–∏—Ç—Å—è)
    def _cm(func):
        def _wrapped(*args, **kwargs):
            with st.expander(title, expanded=True):
                return func(*args, **kwargs)
        return _wrapped
    return _cm


# ---------- main tab ----------
def departments_main(company_id: int):
    st.subheader("üè¢ –ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏")

    db = SessionLocal()

    # --- —Ç–∞–±–ª–∏—Ü–∞ ---
    deps = (
        db.query(Department)
        .filter(Department.company_id == company_id)
        .order_by(Department.id.desc())
        .all()
    )

    if not deps:
        st.info("–ü–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è.")
        df = pd.DataFrame(columns=["–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ", "–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏", "–ß–µ–∫‚Äë–ª–∏—Å—Ç—ã"])
        st.dataframe(df, use_container_width=True, hide_index=True)
    else:
        rows = []
        for d in deps:
            dep_positions = _dep_positions(db, d.id)
            cls_cnt = len(_union_checklists(dep_positions))
            rows.append({
                "–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ": d.name,
                "–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏": len(d.users or []),
                "–ß–µ–∫‚Äë–ª–∏—Å—Ç—ã": cls_cnt,
            })
        st.dataframe(pd.DataFrame(rows), use_container_width=True, hide_index=True)

    # --- –∫–Ω–æ–ø–∫–∞ —Å–Ω–∏–∑—É: –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ ¬´–î–æ–±–∞–≤–∏—Ç—å / –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å¬ª ---
    if st.button("‚ûï –î–æ–±–∞–≤–∏—Ç—å / ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", type="primary"):
        _show_add_edit_modal(db, company_id)

    db.close()


# ---------- modal content ----------
def _show_add_edit_modal(db, company_id: int):
    @(_modal("–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ: –¥–æ–±–∞–≤–∏—Ç—å / —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"))
    def _content():
        mode = st.radio(
            "–†–µ–∂–∏–º",
            ["–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ", "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ"],
            horizontal=True,
            key="dep_mode"
        )

        dep_to_edit: Optional[Department] = None
        if mode == "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ":
            deps_all = (
                db.query(Department)
                .filter(Department.company_id == company_id)
                .order_by(Department.name.asc())
                .all()
            )
            options = {d.name: d.id for d in deps_all}  # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–º–µ–Ω–∞
            if not options:
                st.info("–ù–µ—Ç –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
                st.button("–ó–∞–∫—Ä—ã—Ç—å", key="close_no_deps", on_click=st.rerun)
                return
            label = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ", list(options.keys()))
            dep_to_edit = db.query(Department).get(options[label])

        default_name = dep_to_edit.name if dep_to_edit else ""
        new_name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è", value=default_name, key="dep_name_input")

        c1, c2, c3 = st.columns(3)
        with c1:
            if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", type="primary", key="dep_save_btn"):
                try:
                    saved = _create_or_update_department(
                        db=db,
                        company_id=company_id,
                        dep_id=(dep_to_edit.id if dep_to_edit else None),
                        name=new_name,
                    )
                    st.success(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {saved.name}")  # –±–µ–∑ ID
                    st.rerun()
                except Exception as e:
                    st.error(str(e))
        with c2:
            st.button("–û—Ç–º–µ–Ω–∞", key="dep_cancel_btn", on_click=st.rerun)

        # --- –∫–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        with c3:
            if dep_to_edit and st.button("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ", key="dep_delete_btn"):
                # –∑–∞–ø–æ–º–∏–Ω–∞–µ–º –≤ —Å–µ—Å—Å–∏–∏ ID –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (–¥–≤—É—Ö–∫–ª–∏–∫–æ–≤–∞—è –∑–∞—â–∏—Ç–∞)
                st.session_state["__del_dep_pending"] = dep_to_edit.id

        # --- –±–ª–æ–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è (–≤–Ω–µ ¬´–∫–Ω–æ–ø–∫–∏¬ª, —á—Ç–æ–±—ã –ø–µ—Ä–µ–∂–∏—Ç—å rerun)
        pending_id = st.session_state.get("__del_dep_pending")
        if dep_to_edit and pending_id == dep_to_edit.id:
            # —Å—á–∏—Ç–∞–µ–º –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–±—É–¥—É—Ç –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤—è–∑–∞–Ω—ã)
            users_count = len(dep_to_edit.users or [])
            st.warning(
                f"–£–¥–∞–ª–∏—Ç—å –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ ¬´{dep_to_edit.name}¬ª? "
                f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ ({users_count}) –±—É–¥—É—Ç –æ—Ç–≤—è–∑–∞–Ω—ã –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è."
            )
            cc1, cc2 = st.columns(2)
            with cc1:
                if st.button("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å –Ω–∞–≤—Å–µ–≥–¥–∞", key="dep_del_confirm"):
                    try:
                        # –ü–æ–≤—Ç–æ—Ä–Ω–æ –±–µ—Ä—ë–º –æ–±—ä–µ–∫—Ç –∏–∑ –ë–î (–Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –æ–Ω –±—ã–ª –æ–±–Ω–æ–≤–ª—ë–Ω)
                        dep = db.query(Department).get(dep_to_edit.id)
                        if dep:
                            # –Ø–≤–Ω–æ –æ—á–∏—â–∞–µ–º many-to-many –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
                            dep.users.clear()
                            db.commit()
                            db.delete(dep)
                            db.commit()
                        st.success("–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ.")
                    except Exception as e:
                        db.rollback()
                        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {e}")
                    finally:
                        st.session_state.pop("__del_dep_pending", None)
                        st.rerun()
            with cc2:
                if st.button("–û—Ç–º–µ–Ω–∞", key="dep_del_cancel"):
                    st.session_state.pop("__del_dep_pending", None)
                    st.info("–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

    _content()
