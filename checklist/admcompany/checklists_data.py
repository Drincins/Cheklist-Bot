# checklist/admcompany/checklists_data.py
import streamlit as st
import pandas as pd
from sqlalchemy.orm import joinedload

from checklist.db.db import SessionLocal
from checklist.db.models import (
    Checklist,
    ChecklistQuestion,
    ChecklistAnswer,
    ChecklistQuestionAnswer,
    Position,  # –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π
)

# ---------------------------
#   –ü–û–ü–û–í–ï–† –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–Ø
# ---------------------------
def _edit_checklist_popover(db, company_id: int, checklists: list[Checklist]):
    """
    –ö–Ω–æ–ø–∫–∞ '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —á–µ–∫‚Äë–ª–∏—Å—Ç' —Å —Ñ–æ—Ä–º–æ–π –≤–Ω—É—Ç—Ä–∏ st.popover:
      - –≤—ã–±–æ—Ä —á–µ–∫-–ª–∏—Å—Ç–∞,
      - –∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è,
      - –æ—Ç–º–µ—Ç–∫–∞ '–æ—Ü–µ–Ω–∏–≤–∞–µ–º—ã–π',
      - –ø—Ä–∏–≤—è–∑–∫–∞ –∫ –¥–æ–ª–∂–Ω–æ—Å—Ç—è–º,
      - –¥–≤—É—Ö–∫–ª–∏–∫–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ (—á–µ—Ä–µ–∑ session_state).
    """
    label = "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —á–µ–∫‚Äë–ª–∏—Å—Ç"
    if hasattr(st, "popover"):
        ctx = st.popover(label, use_container_width=True)
    else:
        # –§–æ–ª–ª–±—ç–∫ –Ω–∞ —Å—Ç–∞—Ä—ã–µ –≤–µ—Ä—Å–∏–∏ Streamlit
        ctx = st.expander(label, expanded=True)

    with ctx:
        if not checklists:
            st.info("–ù–µ—Ç —á–µ–∫‚Äë–ª–∏—Å—Ç–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
            return

        # –í—ã–±–æ—Ä —á–µ–∫-–ª–∏—Å—Ç–∞ –ø–æ –∏–º–µ–Ω–∏
        by_name = {cl.name: cl for cl in checklists}
        selected_name = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —á–µ–∫‚Äë–ª–∏—Å—Ç", list(by_name.keys()), key="ck_pop_sel")
        cl = by_name[selected_name]

        # –ü—É–ª –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π –∫–æ–º–ø–∞–Ω–∏–∏
        all_positions = (
            db.query(Position)
            .filter_by(company_id=company_id)
            .order_by(Position.name.asc())
            .all()
        )
        pos_map = {p.name: p.id for p in all_positions}
        current_ids = {p.id for p in (cl.positions or [])}
        default_names = [p.name for p in all_positions if p.id in current_ids]

        # –§–æ—Ä–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        with st.form("ck_pop_form"):
            new_name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ —á–µ–∫‚Äë–ª–∏—Å—Ç–∞", value=cl.name, key="ck_pop_name")
            new_is_scored = st.checkbox("–û—Ü–µ–Ω–∏–≤–∞–µ–º—ã–π —á–µ–∫‚Äë–ª–∏—Å—Ç?", value=cl.is_scored, key="ck_pop_scored")
            chosen_pos_names = st.multiselect(
                "–î–æ–ª–∂–Ω–æ—Å—Ç–∏, –∫–æ—Ç–æ—Ä—ã–º –Ω–∞–∑–Ω–∞—á–µ–Ω —á–µ–∫‚Äë–ª–∏—Å—Ç",
                options=list(pos_map.keys()),
                default=default_names,
                key="ck_pop_positions"
            )
            chosen_ids = [pos_map[n] for n in chosen_pos_names]

            col_save, col_del = st.columns(2)
            save_btn = col_save.form_submit_button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å")
            del_btn  = col_del.form_submit_button("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", type="secondary")

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        if save_btn:
            try:
                cl.name = (new_name or "").strip() or cl.name
                cl.is_scored = new_is_scored
                cl.positions = [p for p in all_positions if p.id in chosen_ids]
                db.commit()
                st.success("–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
                st.rerun()
            except Exception as e:
                db.rollback()
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}")

        # –î–≤—É—Ö–∫–ª–∏–∫–æ–≤–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è (—á–µ—Ä–µ–∑ session_state)
        if del_btn:
            st.session_state["__del_ck_pending"] = cl.id

        if st.session_state.get("__del_ck_pending") == cl.id:
            st.warning("–£–¥–∞–ª–µ–Ω–∏–µ —á–µ–∫‚Äë–ª–∏—Å—Ç–∞ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ. –ë—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã.")
            c1, c2 = st.columns(2)
            with c1:
                if st.button("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å –Ω–∞–≤—Å–µ–≥–¥–∞", key=f"ck_confirm_del_{cl.id}"):
                    try:
                        # 1) —Å–æ–±—Ä–∞—Ç—å id –≤–æ–ø—Ä–æ—Å–æ–≤
                        q_ids = [qid for (qid,) in db.query(ChecklistQuestion.id)
                                 .filter_by(checklist_id=cl.id).all()]
                        # 2) —É–¥–∞–ª–∏—Ç—å –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã
                        if q_ids:
                            db.query(ChecklistQuestionAnswer).filter(
                                ChecklistQuestionAnswer.question_id.in_(q_ids)
                            ).delete(synchronize_session=False)
                        # 3) —É–¥–∞–ª–∏—Ç—å –æ—Ç–≤–µ—Ç—ã —á–µ–∫‚Äë–ª–∏—Å—Ç–∞
                        db.query(ChecklistAnswer).filter_by(
                            checklist_id=cl.id
                        ).delete(synchronize_session=False)
                        # 4) —É–¥–∞–ª–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã
                        db.query(ChecklistQuestion).filter_by(
                            checklist_id=cl.id
                        ).delete(synchronize_session=False)
                        # 5) —É–¥–∞–ª–∏—Ç—å —Å–∞–º —á–µ–∫‚Äë–ª–∏—Å—Ç
                        db.delete(cl)
                        db.commit()
                        st.success("–ß–µ–∫‚Äë–ª–∏—Å—Ç —É–¥–∞–ª—ë–Ω.")
                    except Exception as e:
                        db.rollback()
                        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {e}")
                    finally:
                        st.session_state.pop("__del_ck_pending", None)
                        st.rerun()
            with c2:
                if st.button("–û—Ç–º–µ–Ω–∞", key=f"ck_cancel_del_{cl.id}"):
                    st.session_state.pop("__del_ck_pending", None)
                    st.rerun()


# ---------------------------
#        TAB RENDER
# ---------------------------
def checklists_data_tab(company_id: int):
    db = SessionLocal()
    try:
        st.subheader("–í—Å–µ —á–µ–∫-–ª–∏—Å—Ç—ã –∫–æ–º–ø–∞–Ω–∏–∏")

        # –°–ø–∏—Å–æ–∫ —á–µ–∫‚Äë–ª–∏—Å—Ç–æ–≤ —Å –ø–æ–¥–≥—Ä—É–∂–µ–Ω–Ω—ã–º–∏ –¥–æ–ª–∂–Ω–æ—Å—Ç—è–º–∏
        checklists = (
            db.query(Checklist)
            .options(joinedload(Checklist.positions))
            .filter(Checklist.company_id == company_id)
            .order_by(Checklist.name.asc())
            .all()
        )

        if not checklists:
            st.info("–ß–µ–∫‚Äë–ª–∏—Å—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
            return

        # ¬´–ö—Ä–∞—Å–∏–≤–∞—è¬ª —Ç–∞–±–ª–∏—Ü–∞ –±–µ–∑ ID
        rows = []
        for cl in checklists:
            pos_names = ", ".join(sorted([p.name for p in (cl.positions or [])])) or "‚Äî"
            rows.append({
                "–ß–µ–∫‚Äë–ª–∏—Å—Ç": cl.name,
                "–û—Ü–µ–Ω–∏–≤–∞–µ–º—ã–π": "–î–∞" if cl.is_scored else "–ù–µ—Ç",
                "–î–æ–ª–∂–Ω–æ—Å—Ç–∏ (–Ω–∞–∑–Ω–∞—á–µ–Ω–æ)": pos_names,
            })
        st.markdown("### üìã –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —á–µ–∫‚Äë–ª–∏—Å—Ç—ã")
        st.dataframe(pd.DataFrame(rows), use_container_width=True, hide_index=True)

        st.markdown("---")

        # –ö–Ω–æ–ø–∫–∞-¬≠–ø–æ–ø–æ–≤–µ—Ä ¬´–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å¬ª –≤ —Å—Ç–∏–ª–µ employees_position
        c1, _ = st.columns([1, 3])
        with c1:
            _edit_checklist_popover(db, company_id, checklists)

        # –í–ù–ò–ú–ê–ù–ò–ï: –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –±–ª–æ–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –ù–ï –Ω—É–∂–Ω–æ ‚Äî
        # –æ–Ω —É–∂–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤–Ω—É—Ç—Ä–∏ popover —á–µ—Ä–µ–∑ session_state["__del_ck_pending"].

    finally:
        db.close()
