import streamlit as st
from checklist.db import SessionLocal
from checklist.models import User, Checklist, ChecklistQuestion
from sqlalchemy.exc import IntegrityError

def company_admin_dashboard(company_id):
    st.title("üë®‚Äçüíº –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∫–æ–º–ø–∞–Ω–∏–∏")
    db = SessionLocal()

    tabs = st.tabs(["–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏", "–î–æ–±–∞–≤–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞", "–ß–µ–∫-–ª–∏—Å—Ç—ã", "–î–æ–±–∞–≤–∏—Ç—å —á–µ–∫-–ª–∏—Å—Ç"])

    # ‚Äî‚Äî‚Äî TAB 1 ‚Äî‚Äî‚Äî –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
    with tabs[0]:
        st.subheader("–°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤")
        users = db.query(User).filter_by(company_id=company_id, role="employee").all()
        if users:
            for u in users:
                st.write(f"- {u.name}")
        else:
            st.info("–°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")

    # ‚Äî‚Äî‚Äî TAB 2 ‚Äî‚Äî‚Äî –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    with tabs[1]:
        st.subheader("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞")
        with st.form("add_user_form"):
            last_name = st.text_input("–§–∞–º–∏–ª–∏—è")
            first_name = st.text_input("–ò–º—è")
            col1, col2 = st.columns([1, 5])
            with col1:
                st.markdown("### +7")
            with col2:
                raw_phone = st.text_input("–¢–µ–ª–µ—Ñ–æ–Ω (10 —Ü–∏—Ñ—Ä)", max_chars=10)
            position = st.text_input("–î–æ–ª–∂–Ω–æ—Å—Ç—å (–ø–æ–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ)")
            submitted = st.form_submit_button("–î–æ–±–∞–≤–∏—Ç—å")
            if submitted:
                if not (last_name and first_name and raw_phone and position):
                    st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è")
                elif not raw_phone.isdigit() or len(raw_phone) != 10:
                    st.error("–¢–µ–ª–µ—Ñ–æ–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ä–æ–≤–Ω–æ 10 —Ü–∏—Ñ—Ä")
                else:
                    phone = "+7" + raw_phone
                    full_name = f"{last_name} {first_name}"
                    existing = db.query(User).filter_by(phone=phone, company_id=company_id).first()
                    if existing:
                        st.warning("–°–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
                    else:
                        new_user = User(
                            name=full_name,
                            phone=phone,
                            role="employee",
                            login=None,
                            hashed_password=None,
                            company_id=company_id,
                            position_id=None  # –ø–æ–∫–∞ –±–µ–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞
                        )
                        db.add(new_user)
                        try:
                            db.commit()
                            st.success(f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫ {full_name} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω")
                        except IntegrityError as e:
                            db.rollback()
                            st.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞")
                            st.exception(e)

    # ‚Äî‚Äî‚Äî TAB 3 ‚Äî‚Äî‚Äî –ü—Ä–æ—Å–º–æ—Ç—Ä —á–µ–∫-–ª–∏—Å—Ç–æ–≤
    with tabs[2]:
        st.subheader("–ß–µ–∫-–ª–∏—Å—Ç—ã –∫–æ–º–ø–∞–Ω–∏–∏")
        checklists = db.query(Checklist).filter_by(company_id=company_id).all()
        if checklists:
            for cl in checklists:
                st.write(f"- {cl.name}")
        else:
            st.info("–ß–µ–∫-–ª–∏—Å—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")

    # ‚Äî‚Äî‚Äî TAB 4 ‚Äî‚Äî‚Äî –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —á–µ–∫-–ª–∏—Å—Ç–∞ —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏
    with tabs[3]:
        st.subheader("–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —á–µ–∫-–ª–∏—Å—Ç (–ø–æ —à–∞–≥–∞–º)")
        if "cl_step" not in st.session_state:
            st.session_state.cl_step = 1
        if "cl_form" not in st.session_state:
            st.session_state.cl_form = {
                "name": "",
                "is_scored": False,
                "questions": []
            }

        # --- –®–ê–ì 1: –ù–∞–∑–≤–∞–Ω–∏–µ –∏ —Ç–∏–ø —á–µ–∫-–ª–∏—Å—Ç–∞ ---
        if st.session_state.cl_step == 1:
            name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ —á–µ–∫-–ª–∏—Å—Ç–∞", value=st.session_state.cl_form["name"])
            is_scored = st.checkbox("–û—Ü–µ–Ω–∏–≤–∞–µ–º—ã–π —á–µ–∫-–ª–∏—Å—Ç?", value=st.session_state.cl_form["is_scored"])
            col1, col2 = st.columns(2)
            with col1:
                if st.button("–î–∞–ª–µ–µ ‚û°Ô∏è"):
                    if not name:
                        st.error("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —á–µ–∫-–ª–∏—Å—Ç–∞")
                    else:
                        st.session_state.cl_form["name"] = name
                        st.session_state.cl_form["is_scored"] = is_scored
                        st.session_state.cl_step = 2
            with col2:
                if st.button("‚Ü©Ô∏è –ù–∞–∑–∞–¥"):
                    st.session_state.cl_form = {
                        "name": "",
                        "is_scored": False,
                        "questions": []
                    }
                    st.session_state.cl_step = 1

        # --- –®–ê–ì 2: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤ ---
        if st.session_state.cl_step == 2:
            st.write(f"**–ß–µ–∫-–ª–∏—Å—Ç:** {st.session_state.cl_form['name']}")
            is_scored = st.session_state.cl_form["is_scored"]
            st.write("–¢–∏–ø: " + ("–û—Ü–µ–Ω–∏–≤–∞–µ–º—ã–π" if is_scored else "–ë–µ–∑ –æ—Ü–µ–Ω–∫–∏"))
            st.markdown("**–î–æ–±–∞–≤—å—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –∫ —á–µ–∫-–ª–∏—Å—Ç—É:**")

            # –¢–∏–ø—ã –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —á–µ–∫-–ª–∏—Å—Ç–∞
            if is_scored:
                answer_types = ["–î–∞/–ù–µ—Ç/–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "–®–∫–∞–ª–∞ (1-10)"]
            else:
                answer_types = ["–ö–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç", "–î–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç", "–î–∞/–ù–µ—Ç/–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "–®–∫–∞–ª–∞ (1-10)"]

            # –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
            with st.form("add_question_form"):
                q_text = st.text_input("–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞")
                q_type = st.selectbox("–¢–∏–ø –æ—Ç–≤–µ—Ç–∞", answer_types)
                q_weight = None
                if is_scored and q_type in ["–î–∞/–ù–µ—Ç/–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "–®–∫–∞–ª–∞ (1-10)"]:
                    q_weight = st.number_input("–í–µ—Å –≤–æ–ø—Ä–æ—Å–∞ (–æ—Ç 1 –¥–æ 10)", min_value=1, max_value=10, value=1)
                q_submit = st.form_submit_button("–î–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å")
                if q_submit:
                    if not q_text:
                        st.error("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞")
                    else:
                        st.session_state.cl_form["questions"].append({
                            "text": q_text,
                            "type": q_type,
                            "weight": int(q_weight) if q_weight else None
                        })
                        st.rerun()

            # –°–ø–∏—Å–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
            if st.session_state.cl_form["questions"]:
                st.markdown("#### –í–æ–ø—Ä–æ—Å—ã —á–µ–∫-–ª–∏—Å—Ç–∞:")
                for idx, q in enumerate(st.session_state.cl_form["questions"], 1):
                    st.markdown(
                        f"{idx}. {q['text']} ‚Äî {q['type']}"
                        + (f" (–≤–µ—Å: {q['weight']})" if q.get("weight") else "")
                    )

            # –£–ø—Ä–∞–≤–ª—è—é—â–∏–µ –∫–Ω–æ–ø–∫–∏
            col1, col2 = st.columns(2)
            with col1:
                if st.button("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", key="back_questions"):
                    st.session_state.cl_step = 1
            with col2:
                if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —á–µ–∫-–ª–∏—Å—Ç", key="save_checklist"):
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
                    if not st.session_state.cl_form["questions"]:
                        st.error("–î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å")
                    else:
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–µ–∫-–ª–∏—Å—Ç –∏ –≤–æ–ø—Ä–æ—Å—ã
                        try:
                            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç
                            existing_cl = db.query(Checklist).filter_by(
                                name=st.session_state.cl_form["name"],
                                company_id=company_id
                            ).first()
                            if existing_cl:
                                st.warning("–¢–∞–∫–æ–π —á–µ–∫-–ª–∏—Å—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
                            else:
                                new_cl = Checklist(
                                    name=st.session_state.cl_form["name"],
                                    is_scored=st.session_state.cl_form["is_scored"],
                                    company_id=company_id,
                                    created_by=1,  # ID —Ç–µ–∫—É—â–µ–≥–æ –∞–¥–º–∏–Ω–∞, –∑–∞–º–µ–Ω–∏ –∫–∞–∫ –Ω—É–∂–Ω–æ
                                )
                                db.add(new_cl)
                                db.commit()
                                # –í–æ–ø—Ä–æ—Å—ã
                                q_type_map = {
                                    "–î–∞/–ù–µ—Ç/–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å": "yesno",
                                    "–®–∫–∞–ª–∞ (1-10)": "scale",
                                    "–ö–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç": "short_text",
                                    "–î–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç": "long_text"
                                }
                                for idx, q in enumerate(st.session_state.cl_form["questions"], 1):
                                    db.add(
                                        ChecklistQuestion(
                                            checklist_id=new_cl.id,
                                            order=idx,
                                            text=q["text"],
                                            type=q_type_map[q["type"]],
                                            required=True,
                                            meta={"weight": q["weight"]} if q.get("weight") else None
                                        )
                                    )
                                db.commit()
                                st.success("–ß–µ–∫-–ª–∏—Å—Ç –∏ –≤–æ–ø—Ä–æ—Å—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
                                st.session_state.cl_form = {"name": "", "is_scored": False, "questions": []}
                                st.session_state.cl_step = 1
                                st.rerun()
                        except IntegrityError as e:
                            db.rollback()
                            st.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —á–µ–∫-–ª–∏—Å—Ç–∞")
                            st.exception(e)


    db.close()
