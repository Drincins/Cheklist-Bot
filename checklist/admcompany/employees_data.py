import streamlit as st
from checklist.db.db import SessionLocal
from checklist.db.models import User, Position, Role
from sqlalchemy.exc import IntegrityError
import pandas as pd
from st_aggrid import AgGrid, GridOptionsBuilder, GridUpdateMode

def employees_data_tab(company_id):
    db = SessionLocal()
    st.subheader("–°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤")
    users = db.query(User).filter_by(company_id=company_id).all()
    positions = db.query(Position).filter_by(company_id=company_id).all()

    position_options = {p.name: p.id for p in positions}

    if users:
        # –ì–æ—Ç–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ
        position_map = {p.id: p.name for p in positions}
        position_name_to_id = {v: k for k, v in position_map.items()}

        data = []
        for user in users:
            department_names = ", ".join([d.name for d in user.departments]) if user.departments else "‚Äî"
            data.append({
                "ID": user.id,
                "–§–ò–û": user.name,
                "–¢–µ–ª–µ—Ñ–æ–Ω": user.phone or "",
                "–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ": department_names,
                "–î–æ–ª–∂–Ω–æ—Å—Ç—å": position_map.get(user.position_id, "–ù–µ —É–∫–∞–∑–∞–Ω–∞")
            })

        df = pd.DataFrame(data)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
        gb = GridOptionsBuilder.from_dataframe(df)
        gb.configure_pagination()
        gb.configure_default_column(editable=True)
        gb.configure_column("ID", editable=False, hide=True)
        gb.configure_selection("multiple", use_checkbox=False)
        grid_options = gb.build()

        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        grid_response = AgGrid(
            df,
            gridOptions=grid_options,
            update_mode=GridUpdateMode.VALUE_CHANGED,
            allow_unsafe_jscode=True,
            theme="streamlit",
            height=500
        )

        edited_rows = grid_response["data"]

        if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è", key="save_employees_data"):
            try:
                for row in edited_rows.to_dict(orient="records"):
                    user = db.query(User).get(row["ID"])
                    if user:
                        user.name = row["–§–ò–û"]
                        user.phone = row["–¢–µ–ª–µ—Ñ–æ–Ω"]
                        # user.department = row["–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ"]  # <--- –£–ë–†–ê–¢–¨!
                        user.position_id = position_name_to_id.get(row["–î–æ–ª–∂–Ω–æ—Å—Ç—å"], user.position_id)
                db.commit()
                st.success("–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
                st.rerun()
            except IntegrityError as e:
                db.rollback()
                st.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏")
                st.exception(e)

    else:
        st.info("–°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")

    db.close()
