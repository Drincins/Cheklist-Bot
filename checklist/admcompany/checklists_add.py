import streamlit as st
from checklist.db.db import SessionLocal
from checklist.db.models import Checklist, ChecklistQuestion, Position
from sqlalchemy.exc import IntegrityError

def checklists_add_tab(company_id):
    db = SessionLocal()
    try:
        st.subheader("–î–æ–±–∞–≤–∏—Ç—å —á–µ–∫-–ª–∏—Å—Ç")

        # –®–∞–≥/—Ñ–æ—Ä–º–∞ –≤ session_state
        if "cl_add_step" not in st.session_state:
            st.session_state.cl_add_step = 1
        if "cl_add_form" not in st.session_state:
            st.session_state.cl_add_form = {
                "name": "",
                "is_scored": False,
                "questions": [],
                "positions": []
            }

        # --- –®–∞–≥ 1: –æ—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–µ–∫-–ª–∏—Å—Ç–∞ ---
        if st.session_state.cl_add_step == 1:
            with st.form("create_checklist_form"):
                name = st.text_input(
                    "–ù–∞–∑–≤–∞–Ω–∏–µ —á–µ–∫-–ª–∏—Å—Ç–∞",
                    value=st.session_state.cl_add_form["name"]
                )
                is_scored = st.checkbox(
                    "–û—Ü–µ–Ω–∏–≤–∞–µ–º—ã–π —á–µ–∫-–ª–∏—Å—Ç?",
                    value=st.session_state.cl_add_form["is_scored"]
                )

                # –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π
                all_positions = (
                    db.query(Position)
                    .filter_by(company_id=company_id)
                    .order_by(Position.name.asc())
                    .all()
                )
                selected_pos_ids = st.session_state.cl_add_form.get("positions", [])
                pos_options = {}
                default_names = []

                if all_positions:
                    pos_options = {p.name: p.id for p in all_positions}
                    default_names = [p.name for p in all_positions if p.id in selected_pos_ids]
                    selected_pos_names = st.multiselect(
                        "–î–ª—è –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π (–º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä)",
                        options=list(pos_options.keys()),
                        default=default_names,
                        key="add_step1_pos_multiselect"
                    )
                    selected_pos_ids = [pos_options[name] for name in selected_pos_names]
                else:
                    st.info("–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –≤ –∫–æ–º–ø–∞–Ω–∏–∏, —á—Ç–æ–±—ã –Ω–∞–∑–Ω–∞—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —á–µ–∫-–ª–∏—Å—Ç—É.")

                # –í–ê–ñ–ù–û: submit –≤—Å–µ–≥–¥–∞ –≤–Ω—É—Ç—Ä–∏ —Ñ–æ—Ä–º—ã –∏ –≤–Ω–µ if/else
                submit = st.form_submit_button("–°–æ–∑–¥–∞—Ç—å –∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é –≤–æ–ø—Ä–æ—Å–æ–≤ ‚û°Ô∏è")

            if submit:
                if not name:
                    st.error("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —á–µ–∫-–ª–∏—Å—Ç–∞")
                else:
                    st.session_state.cl_add_form["name"] = name
                    st.session_state.cl_add_form["is_scored"] = is_scored
                    st.session_state.cl_add_form["positions"] = selected_pos_ids
                    st.session_state.cl_add_step = 2
                    st.rerun()

        # --- –®–∞–≥ 2: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ---
        if st.session_state.cl_add_step == 2:
            st.markdown(f"**–ß–µ–∫-–ª–∏—Å—Ç:** {st.session_state.cl_add_form['name']}")
            is_scored = st.session_state.cl_add_form["is_scored"]
            st.write("–¢–∏–ø: " + ("–û—Ü–µ–Ω–∏–≤–∞–µ–º—ã–π" if is_scored else "–ë–µ–∑ –æ—Ü–µ–Ω–∫–∏"))

            # –ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ (read-only)
            if st.session_state.cl_add_form.get("positions"):
                all_positions = db.query(Position).filter_by(company_id=company_id).all()
                by_id = {p.id: p.name for p in all_positions}
                chosen = [by_id.get(pid, f"id={pid}") for pid in st.session_state.cl_add_form["positions"]]
                st.caption("–ù–∞–∑–Ω–∞—á–µ–Ω–æ –¥–ª—è –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π: " + ", ".join(chosen))

            st.markdown("### –î–æ–±–∞–≤—å—Ç–µ –≤–æ–ø—Ä–æ—Å—ã:")

            # –¢–µ–∫—É—â–∏–µ —Ç–∏–ø—ã –ø—Ä–æ–µ–∫—Ç–∞
            answer_types = (
                ["–î–∞/–ù–µ—Ç/–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "–®–∫–∞–ª–∞ (1-10)"]
                if is_scored else
                ["–ö–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç", "–î–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç", "–î–∞/–ù–µ—Ç/–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "–®–∫–∞–ª–∞ (1-10)"]
            )

            with st.form("add_question_form"):
                q_text = st.text_input("1) –í–æ–ø—Ä–æ—Å", key="add_q_text")
                q_type = st.selectbox("2) –¢–∏–ø –æ—Ç–≤–µ—Ç–∞", answer_types, key="add_q_type")

                # –í–µ—Å ‚Äî —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ—Ü–µ–Ω–∏–≤–∞–µ–º—ã–π –∏ —Ç–∏–ø —Ä–µ–ª–µ–≤–∞–Ω—Ç–µ–Ω
                q_weight = None
                if is_scored and q_type in ["–î–∞/–ù–µ—Ç/–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "–®–∫–∞–ª–∞ (1-10)"]:
                    q_weight = st.number_input(
                        "3) –í–µ—Å –≤–æ–ø—Ä–æ—Å–∞ (1‚Äì10)",
                        min_value=1,
                        max_value=10,
                        value=1,
                        key="add_q_weight"
                    )

                # –ù–æ–≤—ã–µ —Ñ–ª–∞–≥–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π (—Ç–µ–ø–µ—Ä—å —ç—Ç–æ —Ä–µ–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –≤ –ë–î)
                req_photo = st.checkbox("4) –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–∏–ª–æ–∂–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é", value=False, key="add_req_photo")
                req_comment = st.checkbox("5) –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º", value=False, key="add_req_comment")

                q_submit = st.form_submit_button("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å")
                if q_submit:
                    if not q_text:
                        st.error("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞")
                    else:
                        st.session_state.cl_add_form["questions"].append({
                            "text": q_text,
                            "type": q_type,
                            "weight": int(q_weight) if q_weight else None,
                            "require_photo": bool(req_photo),
                            "require_comment": bool(req_comment),
                        })
                        st.rerun()

            if st.session_state.cl_add_form["questions"]:
                st.markdown("#### –í–æ–ø—Ä–æ—Å—ã —á–µ–∫-–ª–∏—Å—Ç–∞:")
                for idx, q in enumerate(st.session_state.cl_add_form["questions"], 1):
                    add = []
                    if q.get("weight"):
                        add.append(f"–≤–µ—Å {q['weight']}")
                    if q.get("require_photo"):
                        add.append("—Ñ–æ—Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ")
                    if q.get("require_comment"):
                        add.append("–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω")
                    suffix = f" ({', '.join(add)})" if add else ""
                    st.markdown(f"{idx}. {q['text']} ‚Äî {q['type']}{suffix}")

            c1, c2 = st.columns(2)
            with c1:
                if st.button("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", key="add_back"):
                    st.session_state.cl_add_step = 1
                    st.rerun()
            with c2:
                if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —á–µ–∫-–ª–∏—Å—Ç", key="add_save_checklist"):
                    if not st.session_state.cl_add_form["questions"]:
                        st.error("–î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å")
                    else:
                        try:
                            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–∞ –ø–æ –∏–º–µ–Ω–∏ –≤ —Ä–∞–º–∫–∞—Ö –∫–æ–º–ø–∞–Ω–∏–∏
                            existing_cl = (
                                db.query(Checklist)
                                .filter_by(name=st.session_state.cl_add_form["name"], company_id=company_id)
                                .first()
                            )
                            if existing_cl:
                                st.warning("–¢–∞–∫–æ–π —á–µ–∫-–ª–∏—Å—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
                            else:
                                # –°–æ–∑–¥–∞—ë–º —á–µ–∫-–ª–∏—Å—Ç –∏ –Ω–∞–∑–Ω–∞—á–∞–µ–º –¥–æ–ª–∂–Ω–æ—Å—Ç–∏
                                pos_ids = st.session_state.cl_add_form["positions"]
                                assigned_positions = (
                                    db.query(Position).filter(Position.id.in_(pos_ids)).all()
                                    if pos_ids else []
                                )

                                new_cl = Checklist(
                                    name=st.session_state.cl_add_form["name"],
                                    company_id=company_id,
                                    is_scored=st.session_state.cl_add_form["is_scored"],
                                    created_by=0,  # TODO: –ø–æ–¥—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –∞–¥–º–∏–Ω–∞, –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ auth
                                    positions=assigned_positions
                                )
                                db.add(new_cl)
                                db.commit()

                                # –¢–∏–ø—ã ‚Üí –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –∫–æ–¥—ã
                                q_type_map = {
                                    "–î–∞/–ù–µ—Ç/–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å": "yesno",
                                    "–®–∫–∞–ª–∞ (1-10)": "scale",
                                    "–ö–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç": "short_text",
                                    "–î–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç": "long_text",
                                }

                                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–ø—Ä–æ—Å—ã (–ù–û–í–´–ï –ü–û–õ–Ø: weight/require_photo/require_comment)
                                for idx, q in enumerate(st.session_state.cl_add_form["questions"], 1):
                                    db.add(
                                        ChecklistQuestion(
                                            checklist_id=new_cl.id,
                                            order=idx,
                                            text=q["text"],
                                            type=q_type_map[q["type"]],
                                            required=True,
                                            weight=(int(q["weight"]) if q.get("weight") is not None else None),
                                            require_photo=bool(q.get("require_photo")),
                                            require_comment=bool(q.get("require_comment")),
                                        )
                                    )

                                db.commit()
                                st.success("–ß–µ–∫-–ª–∏—Å—Ç –∏ –≤–æ–ø—Ä–æ—Å—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
                                # –°–±—Ä–æ—Å —Ñ–æ—Ä–º—ã
                                st.session_state.cl_add_form = {
                                    "name": "",
                                    "is_scored": False,
                                    "questions": [],
                                    "positions": []
                                }
                                st.session_state.cl_add_step = 1
                                st.rerun()

                        except IntegrityError as e:
                            db.rollback()
                            st.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —á–µ–∫-–ª–∏—Å—Ç–∞")
                            st.exception(e)
    finally:
        db.close()
