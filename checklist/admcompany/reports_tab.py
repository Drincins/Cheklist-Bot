import streamlit as st
import os
import pandas as pd
from checklist.db.db import SessionLocal
from checklist.db.models import (
    User,
    Checklist,
    ChecklistAnswer,
    ChecklistQuestion,
    ChecklistQuestionAnswer,
)
from sqlalchemy.exc import IntegrityError

# --- –õ–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Ñ–æ—Ç–æ ---
os.makedirs("media", exist_ok=True)


# --- –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ Telegram Bot (–ø–æ file_id) ---
def download_photos_via_bot(token: str):
    """
    –°–∫–∞—á–∏–≤–∞–µ—Ç –≤—Å–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–æ file_id –∏–∑ ChecklistQuestionAnswer.photo_path,
    –µ—Å–ª–∏ —Ç–∞–º —Ö—Ä–∞–Ω–∏—Ç—Å—è file_id (–∞ –Ω–µ –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å). –£–∂–µ —Å–∫–∞—á–∞–Ω–Ω—ã–µ –Ω–µ —Ç—Ä–æ–≥–∞–µ–º.
    """
    import asyncio
    from aiogram import Bot

    bot = Bot(token=token)

    async def _inner():
        db = SessionLocal()
        answers = db.query(ChecklistQuestionAnswer).all()
        count, errors = 0, 0
        for ans in answers:
            file_id = ans.photo_path
            # –°—á–∏—Ç–∞–µ–º, —á—Ç–æ –µ—Å–ª–∏ –ù–ï .jpg/.png, —Ç–æ —ç—Ç–æ file_id
            if file_id and not str(file_id).lower().endswith((".jpg", ".jpeg", ".png")):
                dest_path = f"media/photo_{ans.id}.jpg"
                if os.path.exists(dest_path):
                    continue
                try:
                    file = await bot.get_file(file_id)
                    await bot.download_file(file.file_path, destination=dest_path)
                    ans.photo_path = dest_path
                    db.commit()
                    count += 1
                except Exception as e:
                    errors += 1
                    print(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è {file_id}: {e}")
        db.close()
        return count, errors

    return asyncio.run(_inner())


# =======================
#      –û–¶–ï–ù–û–ß–ù–´–ï –£–¢–ò–õ–ò–¢–´
# =======================
def _get_weight(question: ChecklistQuestion) -> int:
    """
    –í–µ—Å –≤–æ–ø—Ä–æ—Å–∞: –±–µ—Ä–µ–º –ø–æ–ª–µ .weight, –∑–∞—Ç–µ–º –∏–∑ question.meta['weight'], –∏–Ω–∞—á–µ 1.
    –õ—é–±—ã–µ –æ—à–∏–±–∫–∏ ‚Äî –¥–µ—Ñ–æ–ª—Ç 1.
    """
    try:
        if getattr(question, "weight", None) is not None:
            return int(question.weight)
        meta = getattr(question, "meta", None)
        if isinstance(meta, dict) and "weight" in meta:
            return int(meta.get("weight") or 1)
    except Exception:
        pass
    return 1


def _is_yes(value: str) -> bool:
    """
    –£–Ω–∏—Ñ–∏–∫–∞—Ü–∏—è ¬´–¥–∞/–Ω–µ—Ç¬ª –æ—Ç–≤–µ—Ç–æ–≤.
    """
    if value is None:
        return False
    s = str(value).strip().lower()
    return s in {"–¥–∞", "yes", "y", "true", "1", "ok", "‚úî", "‚úÖ", "–ø—Ä–æ–π–¥–µ–Ω–æ", "–≤—ã–ø–æ–ª–Ω–µ–Ω–æ"}


def _parse_scale(value: str) -> int:
    """
    –ü–∞—Ä—Å–∏–º —à–∫–∞–ª—É 0..10 (—Å—Ç—Ä–æ–∫–∞/—á–∏—Å–ª–æ). –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å ‚Äî 0.
    """
    try:
        v = int(float(str(value).replace(",", ".").strip()))
        return max(0, min(10, v))
    except Exception:
        return 0


def compute_answer_score(db, ans: ChecklistAnswer):
    """
    –°—á–∏—Ç–∞–µ–º –æ—Ü–µ–Ω–∫—É –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ ans.
    –£—á–∏—Ç—ã–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã —Ç–∏–ø–æ–≤ 'yesno' –∏ 'scale':
      - yesno: –¥–∞=1, –Ω–µ—Ç=0
      - scale: 0..10 => 0.0..1.0
    –ò—Ç–æ–≥: —Å—É–º–º–∞(v * weight) –∏ –º–∞–∫—Å–∏–º—É–º: —Å—É–º–º–∞(weight).
    –í–æ–∑–≤—Ä–∞—â–∞–µ–º (score, max_score, percent) –∏–ª–∏ (None, None, None), –µ—Å–ª–∏ –Ω–µ—á–µ–≥–æ —Å—á–∏—Ç–∞—Ç—å.
    """
    # –í–æ–ø—Ä–æ—Å—ã –ø–æ –¥–∞–Ω–Ω–æ–º—É —á–µ–∫-–ª–∏—Å—Ç—É
    questions = {
        q.id: q
        for q in db.query(ChecklistQuestion).filter_by(checklist_id=ans.checklist_id).all()
    }
    if not questions:
        return (None, None, None)

    q_answers = db.query(ChecklistQuestionAnswer).filter_by(answer_id=ans.id).all()
    if not q_answers:
        return (None, None, None)

    total_w = 0
    got = 0.0

    for qa in q_answers:
        q = questions.get(qa.question_id)
        if not q:
            continue
        # –£—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ yesno/scale
        if q.type not in ("yesno", "scale"):
            continue

        w = _get_weight(q)
        total_w += w

        if q.type == "yesno":
            v = 1.0 if _is_yes(qa.response_value) else 0.0
        else:  # scale
            v = _parse_scale(qa.response_value) / 10.0

        got += v * w

    if total_w == 0:
        return (None, None, None)

    percent = round(got / total_w * 100, 1)
    return (round(got, 2), total_w, percent)


# =======================
#        UI –í–ö–õ–ê–î–ö–ò
# =======================
def reports_tab(company_id=None):
    st.title("üìä –û—Ç—á—ë—Ç—ã –ø–æ —á–µ–∫‚Äë–ª–∏—Å—Ç–∞–º")

    # -------- –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π --------
    TOKEN = "7346157568:AAF_VYFkjq2tnyGrLykmb44ILNVdUbdGhbI"
    if st.button("üîÅ –û–±–Ω–æ–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (—Å–∫–∞—á–∞—Ç—å –≤—Å–µ —Ñ–æ—Ç–æ –∏–∑ Telegram)"):
        with st.spinner("–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ..."):
            count, errors = download_photos_via_bot(TOKEN)
            st.success(f"–°–∫–∞—á–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {count}. –û—à–∏–±–æ–∫: {errors}")
        st.rerun()

    db = SessionLocal()

    # --- –§–∏–ª—å—Ç—Ä –ø–æ —á–µ–∫-–ª–∏—Å—Ç—É (—Å–µ–ª–µ–∫—Ç) ---
    # –°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ —á–µ–∫-–ª–∏—Å—Ç–æ–≤, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è
    checklists = db.query(Checklist).all()
    cl_map = {cl.id: cl.name for cl in checklists}
    cl_options = ["–í—Å–µ —á–µ–∫-–ª–∏—Å—Ç—ã"] + [cl_map[cid] for cid in sorted(cl_map, key=lambda x: cl_map[x].lower())]
    selected_cl_name = st.selectbox("–§–∏–ª—å—Ç—Ä: —á–µ–∫-–ª–∏—Å—Ç", cl_options)

    base_q = db.query(ChecklistAnswer).order_by(ChecklistAnswer.submitted_at.desc())
    if selected_cl_name != "–í—Å–µ —á–µ–∫-–ª–∏—Å—Ç—ã":
        selected_cl_id = next((cid for cid, name in cl_map.items() if name == selected_cl_name), None)
        answers = base_q.filter(ChecklistAnswer.checklist_id == selected_cl_id).all()
    else:
        answers = base_q.all()

    if not answers:
        st.info("–ù–µ—Ç –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ —á–µ–∫‚Äë–ª–∏—Å—Ç–∞–º –ø–æ–¥ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä.")
        db.close()
        return

    # --- –°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –ø–æ –æ—Ç–≤–µ—Ç–∞–º (—Å –æ—Ü–µ–Ω–∫–æ–π) ---
    rows = []
    for ans in answers:
        user = db.query(User).get(ans.user_id)
        checklist = db.query(Checklist).get(ans.checklist_id)
        score, max_score, percent = compute_answer_score(db, ans)

        rows.append(
            {
                "ID –æ—Ç–≤–µ—Ç–∞": ans.id,
                "–°–æ—Ç—Ä—É–¥–Ω–∏–∫": user.name if user else f"user_id={ans.user_id}",
                "–ß–µ–∫-–ª–∏—Å—Ç": checklist.name if checklist else f"checklist_id={ans.checklist_id}",
                "–î–∞—Ç–∞": ans.submitted_at.strftime("%Y-%m-%d %H:%M") if ans.submitted_at else "‚Äì",
                "–û—Ü–µ–Ω–∫–∞ (%)": f"{percent}%" if percent is not None else "‚Äî",
            }
        )

    df = pd.DataFrame(rows)
    st.dataframe(df, use_container_width=True)

    # --- –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ ---
    ids = df["ID –æ—Ç–≤–µ—Ç–∞"].tolist()
    if ids:
        selected_id = st.selectbox("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ—Ç–∞–ª–∏ –æ—Ç–≤–µ—Ç–∞ (ID):", ids)
        if selected_id:
            ans = db.query(ChecklistAnswer).get(int(selected_id))
            user = db.query(User).get(ans.user_id)
            checklist = db.query(Checklist).get(ans.checklist_id)

            st.markdown(
                f"### {user.name if user else f'user_id={ans.user_id}'} ‚Äî "
                f"{checklist.name if checklist else f'checklist_id={ans.checklist_id}'} "
                f"({ans.submitted_at.strftime('%Y-%m-%d %H:%M') if ans.submitted_at else '‚Äì'})"
            )

            q_answers = (
                db.query(ChecklistQuestionAnswer)
                .filter_by(answer_id=ans.id)
                .all()
            )

            for q_ans in q_answers:
                question = db.query(ChecklistQuestion).get(q_ans.question_id)
                q_title = question.text if question else f"question_id={q_ans.question_id}"
                st.markdown(
                    f"**{q_title}**\n\n"
                    f"–û—Ç–≤–µ—Ç: {q_ans.response_value if (q_ans.response_value not in (None, '')) else '‚Äî'}  "
                    + (f"\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {q_ans.comment}" if q_ans.comment else "")
                )

                # –§–æ—Ç–æ/—Ñ–∞–π–ª
                if q_ans.photo_path:
                    p = str(q_ans.photo_path)
                    if p.lower().endswith((".png", ".jpg", ".jpeg")) and os.path.exists(p):
                        st.image(p, caption="–§–æ—Ç–æ")
                    else:
                        st.caption(f"–§–∞–π–ª: `{p}`")

                st.markdown("---")

            # --- –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞ –≤–Ω–∏–∑—É –¥–µ—Ç–∞–ª–µ–π ---
            score, max_score, percent = compute_answer_score(db, ans)
            if percent is not None:
                st.info(f"**–ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞:** {score} –∏–∑ {max_score}  ¬∑  **{percent}%**")
            else:
                st.caption("–î–ª—è —ç—Ç–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –Ω–µ—Ç –æ—Ü–µ–Ω–∏–≤–∞–µ–º—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ (yesno/scale).")

    db.close()
