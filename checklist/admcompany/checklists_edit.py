import streamlit as st
from checklist.db.db import SessionLocal
from checklist.db.models import Checklist, ChecklistQuestion, Position
from sqlalchemy.exc import IntegrityError

def checklists_edit_tab(company_id):
    db = SessionLocal()
    st.subheader("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —á–µ–∫-–ª–∏—Å—Ç")
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —á–µ–∫-–ª–∏—Å—Ç—ã –∫–æ–º–ø–∞–Ω–∏–∏
    checklists = db.query(Checklist).filter_by(company_id=company_id).all()
    if not checklists:
        st.info("–í –∫–æ–º–ø–∞–Ω–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —á–µ–∫-–ª–∏—Å—Ç–æ–≤.")
        db.close()
        return

    cl_names = [cl.name for cl in checklists]
    selected_name = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —á–µ–∫-–ª–∏—Å—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", cl_names, key="edit_select")
    selected_cl = next(cl for cl in checklists if cl.name == selected_name)

    # --- –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —á–µ–∫-–ª–∏—Å—Ç–∞ ---
    with st.form("edit_checklist_form"):
        new_name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ —á–µ–∫-–ª–∏—Å—Ç–∞", value=selected_cl.name)
        is_scored = st.checkbox("–û—Ü–µ–Ω–∏–≤–∞–µ–º—ã–π —á–µ–∫-–ª–∏—Å—Ç?", value=selected_cl.is_scored)
        save_cl = st.form_submit_button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è —á–µ–∫-–ª–∏—Å—Ç–∞")
        if save_cl:
            selected_cl.name = new_name
            selected_cl.is_scored = is_scored
            try:
                db.commit()
                st.success("–ß–µ–∫-–ª–∏—Å—Ç –æ–±–Ω–æ–≤–ª—ë–Ω")
                st.rerun()
            except IntegrityError as e:
                db.rollback()
                st.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π")
                st.exception(e)

    st.markdown("### üßë‚Äçüíº –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —á–µ–∫-–ª–∏—Å—Ç–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç—è–º")

    # --- –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π ---
    all_positions = db.query(Position).filter_by(company_id=company_id).all()
    if all_positions:
        current_ids = [pos.id for pos in selected_cl.positions]
        pos_options = {p.name: p.id for p in all_positions}
        selected_names = st.multiselect(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏, –∫–æ—Ç–æ—Ä—ã–º –¥–æ—Å—Ç—É–ø–µ–Ω —ç—Ç–æ—Ç —á–µ–∫-–ª–∏—Å—Ç",
            options=list(pos_options.keys()),
            default=[p.name for p in all_positions if p.id in current_ids],
            key="edit_checklist_position_bind"
        )
        selected_ids = [pos_options[name] for name in selected_names]

        if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è"):
            try:
                selected_cl.positions = [p for p in all_positions if p.id in selected_ids]
                db.commit()
                st.success("–ü—Ä–∏–≤—è–∑–∫–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")
                st.rerun()
            except IntegrityError as e:
                db.rollback()
                st.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π")
                st.exception(e)
    else:
        st.info("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π –≤ —ç—Ç–æ–π –∫–æ–º–ø–∞–Ω–∏–∏.")

    st.markdown("---")
    st.markdown("### –í–æ–ø—Ä–æ—Å—ã —á–µ–∫-–ª–∏—Å—Ç–∞")

    questions = db.query(ChecklistQuestion).filter_by(checklist_id=selected_cl.id).order_by(ChecklistQuestion.order).all()
    if questions:
        for q in questions:
            with st.expander(f"–í–æ–ø—Ä–æ—Å {q.order}: {q.text}"):
                new_q_text = st.text_input("–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞", value=q.text, key=f"q_text_{q.id}")
                new_q_type = st.selectbox(
                    "–¢–∏–ø –æ—Ç–≤–µ—Ç–∞", 
                    ["yesno", "scale", "short_text", "long_text"], 
                    index=["yesno", "scale", "short_text", "long_text"].index(q.type), 
                    key=f"q_type_{q.id}"
                )
                new_weight = st.number_input("–í–µ—Å –≤–æ–ø—Ä–æ—Å–∞", value=int(q.meta['weight']) if q.meta and 'weight' in q.meta else 1, min_value=1, max_value=10, key=f"q_weight_{q.id}")
                col1, col2 = st.columns(2)
                with col1:
                    if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–æ–ø—Ä–æ—Å", key=f"save_q_{q.id}"):
                        q.text = new_q_text
                        q.type = new_q_type
                        q.meta = {"weight": int(new_weight)}
                        try:
                            db.commit()
                            st.success("–í–æ–ø—Ä–æ—Å –æ–±–Ω–æ–≤–ª—ë–Ω")
                            st.rerun()
                        except IntegrityError as e:
                            db.rollback()
                            st.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞")
                            st.exception(e)
                with col2:
                    if st.button("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤–æ–ø—Ä–æ—Å", key=f"del_q_{q.id}"):
                        db.delete(q)
                        db.commit()
                        st.success("–í–æ–ø—Ä–æ—Å —É–¥–∞–ª—ë–Ω")
                        st.rerun()
    else:
        st.info("–í —ç—Ç–æ–º —á–µ–∫-–ª–∏—Å—Ç–µ –ø–æ–∫–∞ –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤.")

    # --- –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å ---
    st.markdown("### –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å")
    with st.form("add_new_q_form"):
        new_q_text = st.text_input("–¢–µ–∫—Å—Ç –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞")
        new_q_type = st.selectbox("–¢–∏–ø –æ—Ç–≤–µ—Ç–∞", ["yesno", "scale", "short_text", "long_text"], key="add_type")
        new_weight = st.number_input("–í–µ—Å –≤–æ–ø—Ä–æ—Å–∞", min_value=1, max_value=10, value=1, key="add_weight")
        add_new_q = st.form_submit_button("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å")
        if add_new_q:
            order = (questions[-1].order + 1) if questions else 1
            db.add(ChecklistQuestion(
                checklist_id=selected_cl.id,
                order=order,
                text=new_q_text,
                type=new_q_type,
                required=True,
                meta={"weight": int(new_weight)}
            ))
            db.commit()
            st.success("–í–æ–ø—Ä–æ—Å –¥–æ–±–∞–≤–ª–µ–Ω")
            st.rerun()

    db.close()
