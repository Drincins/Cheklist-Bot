import streamlit as st 
import pandas as pd
from sqlalchemy.exc import IntegrityError
from sqlalchemy.orm import joinedload
from sqlalchemy.orm import Session

from checklist.db.db import SessionLocal
from checklist.db.models import Checklist, ChecklistQuestion, Position
from checklist.admcompany.checklists_add import checklists_add_tab

# –ú–µ—Ç–∫–∏ —Ç–∏–ø–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤
_TYPE_LABELS = {
    "yesno": "–î–∞/–ù–µ—Ç/–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å",
    "scale": "–®–∫–∞–ª–∞ (1‚Äì10)",
    "short_text": "–ö–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç",
    "long_text": "–î–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç",
}
_TYPE_ORDER = ["yesno", "scale", "short_text", "long_text"]


def _type_label(code: str) -> str:
    return _TYPE_LABELS.get(code, code or "‚Äî")


def _remember_selected_checklist(cl: Checklist):
    """–ó–∞–ø–æ–º–∏–Ω–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —á–µ–∫-–ª–∏—Å—Ç –≤ —Å–µ—Å—Å–∏–∏."""
    st.session_state["cl_edit_selected_id"] = cl.id


def _remember_selected_question(q: ChecklistQuestion | None):
    """–ó–∞–ø–æ–º–∏–Ω–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å –≤ —Å–µ—Å—Å–∏–∏ (–∏–ª–∏ None)."""
    st.session_state["cl_edit_selected_qid"] = q.id if q else None


def _selected_checklist_index(checklists: list[Checklist]) -> int:
    """–í–µ—Ä–Ω—É—Ç—å –∏–Ω–¥–µ–∫—Å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —á–µ–∫-–ª–∏—Å—Ç–∞ –ø–æ session_state, –∏–Ω–∞—á–µ 0."""
    cid = st.session_state.get("cl_edit_selected_id")
    if cid:
        for i, cl in enumerate(checklists):
            if cl.id == cid:
                return i
    return 0


def _selected_question_index(questions: list[ChecklistQuestion]) -> int:
    """–í–µ—Ä–Ω—É—Ç—å –∏–Ω–¥–µ–∫—Å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ session_state, –∏–Ω–∞—á–µ 0."""
    qid = st.session_state.get("cl_edit_selected_qid")
    if qid:
        for i, q in enumerate(questions):
            if q.id == qid:
                return i
    return 0


def _reorder_questions(db: Session, checklist_id: int):
    """–ü–µ—Ä–µ—É–ø–æ—Ä—è–¥–æ—á–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è, —á—Ç–æ–±—ã –ø–æ—Ä—è–¥–æ–∫ –±—ã–ª 1..N."""
    qs = (
        db.query(ChecklistQuestion)
        .filter_by(checklist_id=checklist_id)
        .order_by(ChecklistQuestion.order.asc(), ChecklistQuestion.id.asc())
        .all()
    )
    changed = False
    for idx, q in enumerate(qs, start=1):
        if q.order != idx:
            q.order = idx
            changed = True
    if changed:
        db.commit()


def _render_new_checklist_button(company_id: int):
    """
    –ö–Ω–æ–ø–∫–∞ '–ù–æ–≤—ã–π —á–µ–∫-–ª–∏—Å—Ç' —Å –º–æ–¥–∞–ª–∫–æ–π.
    –í–ê–ñ–ù–û: –ø–µ—Ä–µ–¥–∞—ë–º dialog_state_key –≤–Ω—É—Ç—Ä—å checklists_add_tab, —á—Ç–æ–±—ã
    –∏–∑ —Ñ–æ—Ä–º—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–æ–∂–Ω–æ –±—ã–ª–æ:
      - –ø–æ –∫–Ω–æ–ø–∫–µ ¬´–°–æ—Ö—Ä–∞–Ω–∏—Ç—å¬ª -> –≤—ã–∑–≤–∞—Ç—å st.rerun() (–∏ –æ–±–Ω–æ–≤–∏—Ç—å —ç—Ç—É –≤–∫–ª–∞–¥–∫—É),
      - –ø–æ —Å–≤–æ–µ–π –∫–Ω–æ–ø–∫–µ ¬´–ó–∞–∫—Ä—ã—Ç—å¬ª -> –≤—ã–∑–≤–∞—Ç—å st.rerun() (–∏ –æ–±–Ω–æ–≤–∏—Ç—å —ç—Ç—É –≤–∫–ª–∞–¥–∫—É).
    """
    _dialog = getattr(st, "dialog", None) or getattr(st, "experimental_dialog", None)

    if _dialog:
        @_dialog("–°–æ–∑–¥–∞—Ç—å —á–µ–∫-–ª–∏—Å—Ç")
        def _add_checklist_dialog():
            # –í–Ω—É—Ç—Ä–∏ —Ñ–æ—Ä–º—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:
            # - –ø–æ —É—Å–ø–µ—à–Ω–æ–º—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—é: st.rerun()
            # - –ø–æ —Å–≤–æ–µ–π –∫–Ω–æ–ø–∫–µ ¬´–ó–∞–∫—Ä—ã—Ç—å¬ª: st.rerun()
            # (–∫–ª—é—á "dlg_add_from_edit" –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –∫–∞–∫ –º–∞—Ä–∫–µ—Ä; –∑–∞–∫—Ä—ã—Ç–∏–µ –¥–µ–ª–∞–µ–º —Å–≤–æ–µ–π –∫–Ω–æ–ø–∫–æ–π)
            checklists_add_tab(company_id, embedded=True, dialog_state_key="dlg_add_from_edit")

        if st.button("üÜï –ù–æ–≤—ã–π —á–µ–∫-–ª–∏—Å—Ç", key="open_add_checklist_bottom", type="primary"):
            _add_checklist_dialog()
    else:
        if st.button("üÜï –ù–æ–≤—ã–π —á–µ–∫-–ª–∏—Å—Ç", key="open_add_checklist_fallback_bottom", type="primary"):
            st.info("–û–±–Ω–æ–≤–∏ Streamlit –¥–æ 1.30+ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞. –ù–∏–∂–µ –ø–æ–∫–∞–∑–∞–Ω–∞ —Ñ–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.")
            st.markdown("---")
            st.markdown("### –î–æ–±–∞–≤–∏—Ç—å —á–µ–∫-–ª–∏—Å—Ç")
            # –§–æ–ª–±—ç–∫: –±–µ–∑ –º–æ–¥–∞–ª–∫–∏. –í—Å—ë —Ä–∞–≤–Ω–æ –ø–µ—Ä–µ–¥–∞—ë–º dialog_state_key ‚Äî –≤–Ω—É—Ç—Ä–∏ –±—É–¥–µ—Ç st.rerun().
            checklists_add_tab(company_id, embedded=True, dialog_state_key="dlg_add_from_edit")


def checklists_edit_tab(company_id: int):
    db: Session = SessionLocal()
    try:
        st.subheader("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å / –î–æ–±–∞–≤–∏—Ç—å —á–µ–∫-–ª–∏—Å—Ç—ã")

        # =========================
        # –§–ò–õ–¨–¢–† –ü–û –î–û–õ–ñ–ù–û–°–¢–Ø–ú
        # =========================
        all_positions = (
            db.query(Position)
            .filter_by(company_id=company_id)
            .order_by(Position.name.asc())
            .all()
        )
        pos_options = {p.name: p.id for p in all_positions}
        pos_names = list(pos_options.keys())

        st.markdown("#### –§–∏–ª—å—Ç—Ä –ø–æ –¥–æ–ª–∂–Ω–æ—Å—Ç—è–º")
        sel_pos_names = st.multiselect(
            "–î–æ–ª–∂–Ω–æ—Å—Ç–∏ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä)",
            options=pos_names,
            default=[],
            key="cl_edit_pos_filter",
        )
        sel_pos_ids = {pos_options[n] for n in sel_pos_names} if sel_pos_names else set()

        # =========================
        # –í–´–ë–û–† –ß–ï–ö-–õ–ò–°–¢–ê
        # =========================
        q = (
            db.query(Checklist)
            .filter(Checklist.company_id == company_id)
            .options(joinedload(Checklist.positions))
            .order_by(Checklist.name.asc())
        )
        if sel_pos_ids:
            q = q.join(Checklist.positions).filter(Position.id.in_(sel_pos_ids)).distinct()

        checklists = q.all()
        if not checklists:
            st.info(
                "–ù–µ—Ç —á–µ–∫-–ª–∏—Å—Ç–æ–≤ (–ø–æ —Ñ–∏–ª—å—Ç—Ä—É –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ)."
                if sel_pos_ids
                else "–í –∫–æ–º–ø–∞–Ω–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —á–µ–∫-–ª–∏—Å—Ç–æ–≤."
            )
            # –ù–∏–∂–Ω—è—è –ø–∞–Ω–µ–ª—å (–æ–¥–Ω–∞ –∫–Ω–æ–ø–∫–∞ ¬´–ù–æ–≤—ã–π —á–µ–∫-–ª–∏—Å—Ç¬ª)
            st.markdown("---")
            cols = st.columns([6, 2, 2, 2])  # –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è –≤–ø—Ä–∞–≤–æ
            with cols[3]:
                _render_new_checklist_button(company_id)
            return

        # –ü–æ–¥—Å—á—ë—Ç –≤–æ–ø—Ä–æ—Å–æ–≤
        cl_id_to_qcount = {
            cl.id: db.query(ChecklistQuestion).filter_by(checklist_id=cl.id).count()
            for cl in checklists
        }
        # –ú–µ—Ç–∫–∏ (–¥–ª—è –∫—Ä–∞—Ç–∫–æ–π –∏–Ω—Ñ—ã)
        labels = [
            f"{cl.name} ‚Äî {'–æ—Ü–µ–Ω–∏–≤–∞–µ–º—ã–π' if cl.is_scored else '–±–µ–∑ –æ—Ü–µ–Ω–∫–∏'} ¬∑ –≤–æ–ø—Ä–æ—Å–æ–≤: {cl_id_to_qcount.get(cl.id, 0)}"
            for cl in checklists
        ]

        # –í—ã–±–æ—Ä —á–µ–∫-–ª–∏—Å—Ç–∞ (—Å—Ç–∞–±–∏–ª—å–Ω–æ —É–¥–µ—Ä–∂–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π)
        default_idx = _selected_checklist_index(checklists)
        sel_idx = st.selectbox(
            "–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–π —á–µ–∫-–ª–∏—Å—Ç:",
            options=list(range(len(checklists))),
            format_func=lambda i: labels[i],
            index=default_idx,
            key="cl_edit_select_idx",
        )
        selected_cl: Checklist = checklists[sel_idx]
        _remember_selected_checklist(selected_cl)

        # =========================
        # –¢–ê–ë–õ–ò–¶–ê –í–û–ü–†–û–°–û–í
        # =========================
        questions = (
            db.query(ChecklistQuestion)
            .filter_by(checklist_id=selected_cl.id)
            .order_by(ChecklistQuestion.order.asc())
            .all()
        )

        st.markdown("#### –í–æ–ø—Ä–æ—Å—ã —á–µ–∫-–ª–∏—Å—Ç–∞")
        if questions:
            rows = []
            for qobj in questions:
                rows.append(
                    {
                        "‚Ññ": qobj.order,
                        "–í–æ–ø—Ä–æ—Å": qobj.text or "",
                        "–¢–∏–ø –æ—Ç–≤–µ—Ç–∞": _type_label(qobj.type),
                        "–§–æ—Ç–æ –æ–±—è–∑.": "–î–∞" if (qobj.require_photo or False) else "–ù–µ—Ç",
                        "–ö–æ–º–º–µ–Ω—Ç –æ–±—è–∑.": "–î–∞" if (qobj.require_comment or False) else "–ù–µ—Ç",
                        "–í–µ—Å": int(qobj.weight) if (qobj.weight is not None) else "",
                    }
                )
            df = pd.DataFrame(
                rows, columns=["‚Ññ", "–í–æ–ø—Ä–æ—Å", "–¢–∏–ø –æ—Ç–≤–µ—Ç–∞", "–§–æ—Ç–æ –æ–±—è–∑.", "–ö–æ–º–º–µ–Ω—Ç –æ–±—è–∑.", "–í–µ—Å"]
            )
            st.dataframe(df, use_container_width=True, hide_index=True)
        else:
            st.info("–í —ç—Ç–æ–º —á–µ–∫-–ª–∏—Å—Ç–µ –ø–æ–∫–∞ –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤.")

        st.markdown("---")

        # =========================
        # –ù–ò–ñ–ù–Ø–Ø –ü–ê–ù–ï–õ–¨: 3 –ö–ù–û–ü–ö–ò
        # =========================
        btn_cols = st.columns([6, 2, 2, 2])  # –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–µ–º –≤–ø—Ä–∞–≤–æ
        # 1) ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å (popover)
        with btn_cols[1]:
            with st.popover("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å", use_container_width=True):
                if not questions:
                    st.info("–í–æ–ø—Ä–æ—Å–æ–≤ –Ω–µ—Ç. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ —á–µ–∫-–ª–∏—Å—Ç.")
                else:
                    # –í—ã–±–æ—Ä –≤–æ–ø—Ä–æ—Å–∞ (—É–¥–µ—Ä–∂–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π)
                    q_labels = [f"{q.order}. {q.text[:60]}" for q in questions]
                    default_q_idx = _selected_question_index(questions)
                    sel_q_idx = st.selectbox(
                        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å:",
                        options=list(range(len(questions))),
                        format_func=lambda i: q_labels[i],
                        index=default_q_idx,
                        key="cl_edit_q_select_idx",
                    )
                    q_edit: ChecklistQuestion = questions[sel_q_idx]
                    _remember_selected_question(q_edit)

                    # –ü–æ–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                    new_text = st.text_input(
                        "–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞", value=q_edit.text or "", key=f"q_text_{q_edit.id}"
                    )
                    new_type = st.selectbox(
                        "–¢–∏–ø –æ—Ç–≤–µ—Ç–∞",
                        options=_TYPE_ORDER,
                        format_func=_type_label,
                        index=_TYPE_ORDER.index(q_edit.type) if q_edit.type in _TYPE_ORDER else 0,
                        key=f"q_type_{q_edit.id}",
                    )
                    new_weight = st.number_input(
                        "–í–µ—Å (1‚Äì10, –µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ)",
                        min_value=1,
                        max_value=10,
                        value=int(q_edit.weight) if q_edit.weight is not None else 1,
                        key=f"q_weight_{q_edit.id}",
                    )
                    c_photo, c_comm = st.columns(2)
                    with c_photo:
                        req_photo = st.checkbox(
                            "–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ —Ñ–æ—Ç–æ", value=bool(q_edit.require_photo), key=f"q_req_photo_{q_edit.id}"
                        )
                    with c_comm:
                        req_comment = st.checkbox(
                            "–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", value=bool(q_edit.require_comment), key=f"q_req_comm_{q_edit.id}"
                        )

                    col_a, col_b = st.columns(2)
                    with col_a:
                        if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è", key=f"save_q_{q_edit.id}"):
                            try:
                                q_edit.text = new_text
                                q_edit.type = new_type
                                q_edit.weight = int(new_weight) if new_weight else None
                                q_edit.require_photo = bool(req_photo)
                                q_edit.require_comment = bool(req_comment)
                                db.commit()
                                # –£–¥–µ—Ä–∂–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤—ã–±–æ—Ä
                                _remember_selected_checklist(selected_cl)
                                _remember_selected_question(q_edit)
                                st.success("–í–æ–ø—Ä–æ—Å –æ–±–Ω–æ–≤–ª—ë–Ω")
                                st.rerun()
                            except IntegrityError as e:
                                db.rollback()
                                st.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞")
                                st.exception(e)
                    with col_b:
                        if st.button("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤–æ–ø—Ä–æ—Å", key=f"del_q_{q_edit.id}"):
                            try:
                                # –≤—ã—á–∏—Å–ª—è–µ–º —Å–æ—Å–µ–¥–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
                                next_q_id = None
                                if len(questions) > 1:
                                    cur_i = sel_q_idx
                                    if cur_i < len(questions) - 1:
                                        next_q_id = questions[cur_i + 1].id
                                    else:
                                        next_q_id = questions[cur_i - 1].id
                                db.delete(q_edit)
                                db.commit()
                                _reorder_questions(db, selected_cl.id)
                                # –£–¥–µ—Ä–∂–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —á–µ–∫-–ª–∏—Å—Ç –∏ –Ω–æ–≤—ã–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å
                                _remember_selected_checklist(selected_cl)
                                if next_q_id:
                                    nq = db.query(ChecklistQuestion).filter_by(id=next_q_id).first()
                                    _remember_selected_question(nq)
                                else:
                                    _remember_selected_question(None)

                                st.success("–í–æ–ø—Ä–æ—Å —É–¥–∞–ª—ë–Ω")
                                st.rerun()
                            except IntegrityError as e:
                                db.rollback()
                                st.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞")
                                st.exception(e)

        # 2) ‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å (popover)
        with btn_cols[2]:
            with st.popover("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å", use_container_width=True):
                new_q_text = st.text_input("–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞", key="add_q_text_pop")
                new_q_type = st.selectbox(
                    "–¢–∏–ø –æ—Ç–≤–µ—Ç–∞", options=_TYPE_ORDER, format_func=_type_label, index=0, key="add_q_type_pop"
                )
                new_q_weight = st.number_input("–í–µ—Å (1‚Äì10, –µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ)", min_value=1, max_value=10, value=1, key="add_q_weight_pop")
                c1, c2 = st.columns(2)
                with c1:
                    new_req_photo = st.checkbox("–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ —Ñ–æ—Ç–æ", value=False, key="add_q_req_photo_pop")
                with c2:
                    new_req_comment = st.checkbox("–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", value=False, key="add_q_req_comment_pop")

                if st.button("‚úÖ –î–æ–±–∞–≤–∏—Ç—å", key="add_q_submit_pop", type="primary"):
                    if not new_q_text.strip():
                        st.error("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞")
                    else:
                        try:
                            # order = –ø–æ—Å–ª–µ–¥–Ω–∏–π + 1
                            last = (
                                db.query(ChecklistQuestion)
                                .filter_by(checklist_id=selected_cl.id)
                                .order_by(ChecklistQuestion.order.desc())
                                .first()
                            )
                            new_order = (last.order + 1) if last else 1
                            new_q = ChecklistQuestion(
                                checklist_id=selected_cl.id,
                                order=new_order,
                                text=new_q_text.strip(),
                                type=new_q_type,
                                required=True,
                                weight=int(new_q_weight) if new_q_weight else None,
                                require_photo=bool(new_req_photo),
                                require_comment=bool(new_req_comment),
                            )
                            db.add(new_q)
                            db.commit()
                            # –£–¥–µ—Ä–∂–∏–≤–∞–µ–º –≤—ã–±–æ—Ä —á–µ–∫-–ª–∏—Å—Ç–∞ –∏ –≤—ã–±—Ä–∞—Ç—å —Ç–æ–ª—å–∫–æ —á—Ç–æ —Å–æ–∑–¥–∞–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å
                            _remember_selected_checklist(selected_cl)
                            _remember_selected_question(new_q)
                            st.success("–í–æ–ø—Ä–æ—Å –¥–æ–±–∞–≤–ª–µ–Ω")
                            st.rerun()
                        except IntegrityError as e:
                            db.rollback()
                            st.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞")
                            st.exception(e)

        # 3) üÜï –ù–æ–≤—ã–π —á–µ–∫-–ª–∏—Å—Ç (–º–æ–¥–∞–ª–∫–∞)
        with btn_cols[3]:
            _render_new_checklist_button(company_id)

    finally:
        db.close()
