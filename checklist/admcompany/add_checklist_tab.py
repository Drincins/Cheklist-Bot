import streamlit as st
from checklist.db import SessionLocal
from checklist.models import Checklist, ChecklistQuestion
from sqlalchemy.exc import IntegrityError

def add_checklist_tab(company_id):
    db = SessionLocal()
    st.subheader("–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —á–µ–∫-–ª–∏—Å—Ç (–ø–æ —à–∞–≥–∞–º)")
    if "cl_step" not in st.session_state:
        st.session_state.cl_step = 1
    if "cl_form" not in st.session_state:
        st.session_state.cl_form = {
            "name": "",
            "is_scored": False,
            "questions": []
        }

    # --- –®–ê–ì 1: –ù–∞–∑–≤–∞–Ω–∏–µ –∏ —Ç–∏–ø —á–µ–∫-–ª–∏—Å—Ç–∞ ---
    if st.session_state.cl_step == 1:
        name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ —á–µ–∫-–ª–∏—Å—Ç–∞", value=st.session_state.cl_form["name"])
        is_scored = st.checkbox("–û—Ü–µ–Ω–∏–≤–∞–µ–º—ã–π —á–µ–∫-–ª–∏—Å—Ç?", value=st.session_state.cl_form["is_scored"])
        col1, col2 = st.columns(2)
        with col1:
            if st.button("–î–∞–ª–µ–µ ‚û°Ô∏è"):
                if not name:
                    st.error("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —á–µ–∫-–ª–∏—Å—Ç–∞")
                else:
                    st.session_state.cl_form["name"] = name
                    st.session_state.cl_form["is_scored"] = is_scored
                    st.session_state.cl_step = 2
        with col2:
            if st.button("‚Ü©Ô∏è –ù–∞–∑–∞–¥"):
                st.session_state.cl_form = {
                    "name": "",
                    "is_scored": False,
                    "questions": []
                }
                st.session_state.cl_step = 1

    # --- –®–ê–ì 2: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤ ---
    if st.session_state.cl_step == 2:
        st.write(f"**–ß–µ–∫-–ª–∏—Å—Ç:** {st.session_state.cl_form['name']}")
        is_scored = st.session_state.cl_form["is_scored"]
        st.write("–¢–∏–ø: " + ("–û—Ü–µ–Ω–∏–≤–∞–µ–º—ã–π" if is_scored else "–ë–µ–∑ –æ—Ü–µ–Ω–∫–∏"))
        st.markdown("**–î–æ–±–∞–≤—å—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –∫ —á–µ–∫-–ª–∏—Å—Ç—É:**")

        if is_scored:
            answer_types = ["–î–∞/–ù–µ—Ç/–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "–®–∫–∞–ª–∞ (1-10)"]
        else:
            answer_types = ["–ö–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç", "–î–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç", "–î–∞/–ù–µ—Ç/–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "–®–∫–∞–ª–∞ (1-10)"]

        with st.form("add_question_form"):
            q_text = st.text_input("–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞")
            q_type = st.selectbox("–¢–∏–ø –æ—Ç–≤–µ—Ç–∞", answer_types)
            q_weight = None
            if is_scored and q_type in ["–î–∞/–ù–µ—Ç/–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "–®–∫–∞–ª–∞ (1-10)"]:
                q_weight = st.number_input("–í–µ—Å –≤–æ–ø—Ä–æ—Å–∞ (–æ—Ç 1 –¥–æ 10)", min_value=1, max_value=10, value=1)
            q_submit = st.form_submit_button("–î–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å")
            if q_submit:
                if not q_text:
                    st.error("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞")
                else:
                    st.session_state.cl_form["questions"].append({
                        "text": q_text,
                        "type": q_type,
                        "weight": int(q_weight) if q_weight else None
                    })
                    st.rerun()

        if st.session_state.cl_form["questions"]:
            st.markdown("#### –í–æ–ø—Ä–æ—Å—ã —á–µ–∫-–ª–∏—Å—Ç–∞:")
            for idx, q in enumerate(st.session_state.cl_form["questions"], 1):
                st.markdown(
                    f"{idx}. {q['text']} ‚Äî {q['type']}"
                    + (f" (–≤–µ—Å: {q['weight']})" if q.get("weight") else "")
                )

        col1, col2 = st.columns(2)
        with col1:
            if st.button("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", key="back_questions"):
                st.session_state.cl_step = 1
        with col2:
            if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —á–µ–∫-–ª–∏—Å—Ç", key="save_checklist"):
                if not st.session_state.cl_form["questions"]:
                    st.error("–î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å")
                else:
                    try:
                        existing_cl = db.query(Checklist).filter_by(
                            name=st.session_state.cl_form["name"],
                            company_id=company_id
                        ).first()
                        if existing_cl:
                            st.warning("–¢–∞–∫–æ–π —á–µ–∫-–ª–∏—Å—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
                        else:
                            new_cl = Checklist(
                                name=st.session_state.cl_form["name"],
                                is_scored=st.session_state.cl_form["is_scored"],
                                company_id=company_id,
                                created_by=1,
                            )
                            db.add(new_cl)
                            db.commit()
                            q_type_map = {
                                "–î–∞/–ù–µ—Ç/–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å": "yesno",
                                "–®–∫–∞–ª–∞ (1-10)": "scale",
                                "–ö–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç": "short_text",
                                "–î–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç": "long_text"
                            }
                            for idx, q in enumerate(st.session_state.cl_form["questions"], 1):
                                db.add(
                                    ChecklistQuestion(
                                        checklist_id=new_cl.id,
                                        order=idx,
                                        text=q["text"],
                                        type=q_type_map[q["type"]],
                                        required=True,
                                        meta={"weight": q["weight"]} if q.get("weight") else None
                                    )
                                )
                            db.commit()
                            st.success("–ß–µ–∫-–ª–∏—Å—Ç –∏ –≤–æ–ø—Ä–æ—Å—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
                            st.session_state.cl_form = {"name": "", "is_scored": False, "questions": []}
                            st.session_state.cl_step = 1
                            st.rerun()
                    except IntegrityError as e:
                        db.rollback()
                        st.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —á–µ–∫-–ª–∏—Å—Ç–∞")
                        st.exception(e)
    db.close()
