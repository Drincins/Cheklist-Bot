--- /dev/null
+++ b/bot/utils/checklist_mode.py
@@ -0,0 +1,33 @@
+# bot/utils/checklist_mode.py
+from typing import List
+
+def chunk_text(s: str, limit: int = 3500) -> List[str]:
+    """–†–∞–∑–±–∏–≤–∞–µ—Ç –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏, —á—Ç–æ–±—ã Telegram –Ω–µ —Ä—É–≥–∞–ª—Å—è –Ω–∞ –ª–∏–º–∏—Ç 4096 —Å–∏–º–≤–æ–ª–æ–≤."""
+    parts = []
+    while s:
+        if len(s) <= limit:
+            parts.append(s)
+            break
+        cut = s.rfind("\n\n", 0, limit)
+        if cut == -1:
+            cut = s.rfind("\n", 0, limit)
+        if cut == -1:
+            cut = limit
+        parts.append(s[:cut])
+        s = s[cut:].lstrip()
+    return parts
+
+def render_full_checklist(questions: list[dict]) -> str:
+    """–°–æ–±–∏—Ä–∞–µ–º –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –æ–¥–∏–Ω —Ç–µ–∫—Å—Ç."""
+    lines = ["üìú *–ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤*\n"]
+    for i, q in enumerate(questions, start=1):
+        qtype = q.get("type") or q.get("question_type") or "text"
+        if qtype in ("yes_no", "yesno"):
+            kind = "–î–∞/–ù–µ—Ç"
+        elif qtype == "scale":
+            kind = "–®–∫–∞–ª–∞ 1‚Äì5"
+        else:
+            kind = "–¢–µ–∫—Å—Ç"
+        title = (q.get("text") or q.get("question_text") or "").strip() or f"–í–æ–ø—Ä–æ—Å #{i}"
+        lines.append(f"*{i}.* {title}\n_–¢–∏–ø:_ {kind}\n")
+    return "\n".join(lines)
--- /dev/null
+++ b/bot/keyboards/mode.py
@@ -0,0 +1,13 @@
+# bot/keyboards/mode.py
+from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
+
+def build_mode_keyboard() -> InlineKeyboardMarkup:
+    return InlineKeyboardMarkup(inline_keyboard=[
+        [InlineKeyboardButton(text="üß≠ –ó–∞–ø–æ–ª–Ω—è—Ç—å –ø–æ—à–∞–≥–æ–≤–æ", callback_data="mode:step")],
+        [InlineKeyboardButton(text="üìú –ü–æ–∫–∞–∑–∞—Ç—å –≤–µ—Å—å —á–µ–∫-–ª–∏—Å—Ç", callback_data="mode:preview")],
+    ])
+
+def build_start_after_preview_keyboard() -> InlineKeyboardMarkup:
+    return InlineKeyboardMarkup(inline_keyboard=[
+        [InlineKeyboardButton(text="‚úÖ –ü—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é", callback_data="mode:step")],
+    ])
--- /dev/null
+++ b/bot/handlers/checklist_select.py
@@ -0,0 +1,69 @@
+# bot/handlers/checklist_select.py
+from aiogram import Router, types, F
+from aiogram.fsm.context import FSMContext
+
+from ..states import Form
+from ..bot_logic import (
+    get_checklists_for_user,
+    get_questions_for_checklist,
+)
+from ..keyboards.inline import get_checklists_keyboard
+from ..keyboards.mode import build_mode_keyboard, build_start_after_preview_keyboard
+from ..utils.checklist_mode import chunk_text, render_full_checklist
+
+router = Router()
+
+@router.message(F.text.startswith("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å"), Form.entering_phone)
+async def show_checklists(message: types.Message, state: FSMContext):
+    data = await state.get_data()
+    checklists = get_checklists_for_user(data["user_id"])
+    if not checklists:
+        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á–µ–∫-–ª–∏—Å—Ç–æ–≤.")
+        return
+    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —á–µ–∫-–ª–∏—Å—Ç –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è:", reply_markup=get_checklists_keyboard(checklists))
+    await state.set_state(Form.show_checklists)
+
+@router.callback_query(F.data.startswith("checklist:"), Form.show_checklists)
+async def start_checklist(callback: types.CallbackQuery, state: FSMContext):
+    checklist_id = int(callback.data.split(":")[1])
+    questions = get_questions_for_checklist(checklist_id)
+    if not questions:
+        await callback.message.answer("–£ —ç—Ç–æ–≥–æ —á–µ–∫-–ª–∏—Å—Ç–∞ –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤.")
+        await callback.answer()
+        return
+
+    await state.update_data(
+        checklist_id=checklist_id,
+        questions=questions,
+        current=0,
+        answers_map={},
+    )
+
+    await callback.message.answer("–ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–π—Ç–∏ —á–µ–∫-–ª–∏—Å—Ç?", reply_markup=build_mode_keyboard())
+    await state.set_state(Form.choose_mode)
+    await callback.answer()
+
+@router.callback_query(F.data == "mode:step", Form.choose_mode)
+async def handle_mode_step(callback: types.CallbackQuery, state: FSMContext):
+    # –õ–µ–Ω–∏–≤—ã–π –∏–º–ø–æ—Ä—Ç, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
+    from .checklist import ask_next_question  # type: ignore
+
+    await state.set_state(Form.answering_question)
+    await callback.message.answer("üìù –ù–∞—á–∏–Ω–∞–µ–º –ø–æ—à–∞–≥–æ–≤–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ.")
+    await ask_next_question(callback.message, state)
+    await callback.answer()
+
+@router.callback_query(F.data == "mode:preview", Form.choose_mode)
+async def handle_mode_preview(callback: types.CallbackQuery, state: FSMContext):
+    data = await state.get_data()
+    questions = data.get("questions", [])
+    text = render_full_checklist(questions)
+
+    for chunk in chunk_text(text, 3500):
+        await callback.message.answer(chunk, parse_mode="Markdown")
+
+    await callback.message.answer(
+        "–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å?",
+        reply_markup=build_start_after_preview_keyboard()
+    )
+    await callback.answer()
