import sys, os
# –¥–æ–±–∞–≤–ª—è–µ–º –ö–û–†–ï–ù–¨ –ø—Ä–æ–µ–∫—Ç–∞, —á—Ç–æ–±—ã 'checklist' –±—ã–ª –≤–∏–¥–µ–Ω –∫–∞–∫ –ø–∞–∫–µ—Ç
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), "..")))

import asyncio
import logging
from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.storage.memory import MemoryStorage
from dotenv import load_dotenv

# –†–æ—É—Ç–µ—Ä—ã
from .handlers import start, fsm_auth, checklist, fsm_completed, fallback

# –ü—ã—Ç–∞–µ–º—Å—è –≤–∑—è—Ç—å —Ç–æ–∫–µ–Ω –∏–∑ config.py, –∏–Ω–∞—á–µ ‚Äî –∏–∑ .env / –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = None
try:
    from config import BOT_TOKEN as CONFIG_TOKEN  # type: ignore
    BOT_TOKEN = CONFIG_TOKEN
except Exception:
    pass

from dotenv import load_dotenv
load_dotenv()
BOT_TOKEN = BOT_TOKEN or os.getenv("BOT_TOKEN")

if not BOT_TOKEN:
    raise RuntimeError(
        "BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–∫–∞–∂–∏ –µ–≥–æ –≤ config.py –∏–ª–∏ –≤ .env (BOT_TOKEN=...)."
    )


def setup_logging() -> None:
    logging.basicConfig(
        level=logging.INFO,
        format="%(asctime)s [%(levelname)s] %(name)s: %(message)s",
    )


def build_dispatcher() -> Dispatcher:
    dp = Dispatcher(storage=MemoryStorage())
    dp.include_router(start.router)
    dp.include_router(fsm_auth.router)
    dp.include_router(checklist.router)
    dp.include_router(fsm_completed.router)
    dp.include_router(fallback.router)
    return dp


async def main() -> None:
    setup_logging()

    bot = Bot(
        token=BOT_TOKEN,
        default=DefaultBotProperties(parse_mode="HTML"),
    )
    dp = build_dispatcher()

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤–µ–±—Ö—É–∫ –∏ –≤–∏—Å—è—á–∏–µ –∞–ø–¥–µ–π—Ç—ã –Ω–∞ —Å—Ç–∞—Ä—Ç–µ
    await bot.delete_webhook(drop_pending_updates=True)

    # –†–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –∞–ø–¥–µ–π—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ä–µ–∞–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ä–æ—É—Ç–µ—Ä–∞–º–∏
    allowed = dp.resolve_used_update_types()

    logging.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    try:
        await dp.start_polling(bot, allowed_updates=allowed)
    except Exception as e:
        logging.exception(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –±–æ—Ç–∞: {e}")
        raise
    finally:
        logging.info("üßπ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞. –î–æ –≤—Å—Ç—Ä–µ—á–∏!")


if __name__ == "__main__":
    asyncio.run(main())
