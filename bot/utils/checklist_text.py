# bot/utils/checklist_text.py

def render_question_text(question: dict, draft: dict) -> str:
    """
    –¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ + –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã: –≤—ã–±—Ä–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç, –µ—Å—Ç—å –ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π/—Ñ–æ—Ç–æ.
    """
    extra = []
    if draft.get("answer") is not None:
        extra.append(f"üü© –û—Ç–≤–µ—Ç: *{draft['answer']}*")
    if draft.get("comment"):
        extra.append("üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω")
    if draft.get("photo_path"):
        extra.append("üì∑ –§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ")

    suffix = ("\n\n" + "\n".join(extra)) if extra else ""
    return f"{question['text']}{suffix}"


def render_answers_summary(questions: list[dict], answers_map: dict) -> str:
    """
    –ö–æ—Ä–æ—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ –æ—Ç–≤–µ—Ç–æ–≤ + –ø—Ä–∏–º–∏—Ç–∏–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ (–ø—Ä–æ—Ü–µ–Ω—Ç ¬´–¥–∞¬ª, —Å—Ä–µ–¥–Ω—è—è —à–∫–∞–ª–∞).
    """
    lines = ["üóÇ *–í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã:*\n"]
    yes_total = yes_cnt = 0
    scale_vals: list[float] = []

    for q in questions:
        d = answers_map.get(q["id"], {})
        a = d.get("answer")
        lines.append(f"‚Äî {q['text']}: *{a if a is not None else '‚Äî'}*")

        if q["type"] == "yesno":
            yes_total += 1
            if str(a).lower() == "yes":
                yes_cnt += 1
        elif q["type"] == "scale" and a is not None:
            try:
                scale_vals.append(float(a))
            except Exception:
                pass

    parts = []
    if yes_total:
        parts.append(f"{round(100 * yes_cnt / yes_total)}% ¬´–¥–∞¬ª")
    if scale_vals:
        parts.append(f"{round(100 * (sum(scale_vals)/len(scale_vals)) / 5)}% —à–∫–∞–ª–∞")
    if parts:
        lines.append("\nüìä –ò—Ç–æ–≥: " + " / ".join(parts))

    return "\n".join(lines)
