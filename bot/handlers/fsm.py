# handlers/fsm.py

from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from states import Form
from bot_logic import find_user_by_name_phone_company, get_checklists_for_user
from keyboards.inline import get_identity_confirmation_keyboard, get_checklists_keyboard

router = Router()

@router.callback_query(F.data == "start_checklist")
async def ask_name(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É *–§–∞–º–∏–ª–∏—é –∏ –ò–º—è*:")
    await state.set_state(Form.entering_name)
    await callback.answer()

@router.message(Form.entering_name)
async def ask_phone(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text.strip())
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    await state.set_state(Form.entering_phone)

@router.message(Form.entering_phone)
async def confirm_user(message: types.Message, state: FSMContext):
    await state.update_data(phone=message.text.strip())
    data = await state.get_data()

    user = find_user_by_name_phone_company(data["name"], data["phone"], company_name=None)
    if user:
        await state.update_data(user_id=user["id"])
        await state.set_state(Form.show_checklists)

        await message.answer(
            f"üîé –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ:\n\n"
            f"*–§–∞–º–∏–ª–∏—è –∏ –ò–º—è:* {user['name']}\n"
            f"*–¢–µ–ª–µ—Ñ–æ–Ω:* {user['phone']}\n"
            f"*–ö–æ–º–ø–∞–Ω–∏—è:* {user.get('company_name', '‚Äî')}\n"
            f"*–î–æ–ª–∂–Ω–æ—Å—Ç—å:* {user['position']}",
            reply_markup=get_identity_confirmation_keyboard(),
            parse_mode="Markdown"
        )
    else:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.set_state(Form.entering_name)

@router.callback_query(F.data == "confirm_identity", Form.show_checklists)
async def identity_approved(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    checklists = get_checklists_for_user(data["user_id"])
    if not checklists:
        await callback.message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á–µ–∫-–ª–∏—Å—Ç–æ–≤.")
        await state.clear()
    else:
        await callback.message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ —á–µ–∫-–ª–∏—Å—Ç –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è:",
            reply_markup=get_checklists_keyboard(checklists)
        )
        await state.set_state(Form.show_checklists)
    await callback.answer()

@router.callback_query(F.data == "reject_identity", Form.show_checklists)
async def identity_rejected(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–ü–æ–ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É *–§–∞–º–∏–ª–∏—é –∏ –ò–º—è*:")
    await state.set_state(Form.entering_name)
    await callback.answer()
