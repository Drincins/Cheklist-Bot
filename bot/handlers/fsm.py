# handlers/fsm.py

from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from ..states import Form
from ..bot_logic import (
    find_user_by_name_phone_company,
    get_checklists_for_user,
    get_completed_checklists_for_user,   # –ø—É—Å—Ç—å –æ—Å—Ç–∞–Ω–µ—Ç—Å—è, –≤–¥—Ä—É–≥ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –µ—â—ë –≥–¥–µ-—Ç–æ
    get_completed_answers_paginated,     # –ù–û–í–û–ï ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∏–∂–µ
    get_answer_report_data,              # –ù–û–í–û–ï ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∏–∂–µ
)
from ..keyboards.inline import get_identity_confirmation_keyboard, get_checklists_keyboard
from ..keyboards.reply import authorized_keyboard
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

router = Router()


# üöÄ –ù–∞–∂–∞–ª "–ù–∞—á–∞—Ç—å"
@router.callback_query(F.data == "start_checklist")
async def ask_name(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É *–§–∞–º–∏–ª–∏—é –∏ –ò–º—è*:")
    await state.set_state(Form.entering_name)
    await callback.answer()


# ‚úçÔ∏è –í–≤–æ–¥–∏—Ç –∏–º—è
@router.message(Form.entering_name)
async def ask_phone(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text.strip())
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    await state.set_state(Form.entering_phone)


# ‚òéÔ∏è –í–≤–æ–¥–∏—Ç —Ç–µ–ª–µ—Ñ–æ–Ω ‚Üí –ø—Ä–æ–≤–µ—Ä–∫–∞
@router.message(Form.entering_phone)
async def confirm_user(message: types.Message, state: FSMContext):
    await state.update_data(phone=message.text.strip())
    data = await state.get_data()

    user = find_user_by_name_phone_company(
        data.get("name", "").strip(),
        data.get("phone", "").strip(),
        company_name=None,
    )

    if user:
        await state.update_data(user_id=user["id"], user=user)
        await state.set_state(Form.show_checklists)

        await message.answer(
            "üîé –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ:\n\n"
            f"*–§–∞–º–∏–ª–∏—è –∏ –ò–º—è:* {user['name']}\n"
            f"*–¢–µ–ª–µ—Ñ–æ–Ω:* {user['phone']}\n"
            f"*–ö–æ–º–ø–∞–Ω–∏—è:* {user.get('company_name', '‚Äî')}\n"
            f"*–î–æ–ª–∂–Ω–æ—Å—Ç—å:* {user.get('position', '‚Äî')}",
            reply_markup=get_identity_confirmation_keyboard(),
            parse_mode="Markdown",
        )
    else:
        await message.answer(
            "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.\n"
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ –∏–º–µ–Ω–∏ –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Ü–∏—Ñ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
        await state.set_state(Form.entering_name)


# ‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ª–∏—á–Ω–æ—Å—Ç–∏
@router.callback_query(F.data == "confirm_identity", Form.show_checklists)
async def identity_approved(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    user_id = data.get("user_id")

    await callback.message.answer(
        "‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ. –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ—è–≤–∏–ª–æ—Å—å —Å–Ω–∏–∑—É üëá",
        reply_markup=authorized_keyboard,
    )

    # –°—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —á–µ–∫-–ª–∏—Å—Ç—ã (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ ‚Äî —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ)
    # if user_id:
    #     checklists = get_checklists_for_user(user_id)
    #     if checklists:
    #         await callback.message.answer(
    #             "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —á–µ–∫-–ª–∏—Å—Ç—ã:",
    #             reply_markup=get_checklists_keyboard(checklists),
    #         )
    #     else:
    #         await callback.message.answer(
    #             "üôÅ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á–µ–∫-–ª–∏—Å—Ç–æ–≤.\n"
    #             "–ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞ ‚Äî –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ —á–µ–∫-–ª–∏—Å—Ç–æ–≤ –Ω–∞ –≤–∞—à—É –¥–æ–ª–∂–Ω–æ—Å—Ç—å."
    #         )

    await state.set_state(Form.show_checklists)
    await callback.answer()


# ‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ
@router.callback_query(F.data == "reject_identity", Form.show_checklists)
async def identity_rejected(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–ü–æ–ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É *–§–∞–º–∏–ª–∏—é –∏ –ò–º—è*:")
    await state.set_state(Form.entering_name)
    await callback.answer()


# ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–î–æ—Å—Ç—É–ø–Ω—ã–µ —á–µ–∫-–ª–∏—Å—Ç—ã"
@router.message((F.text == "‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ —á–µ–∫-–ª–∏—Å—Ç—ã") | (F.text == "‚úÖ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —á–µ–∫-–ª–∏—Å—Ç—ã"))
async def show_available_checklists(message: types.Message, state: FSMContext):
    data = await state.get_data()
    user_id = data.get("user_id")

    if not user_id:
        await message.answer("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ /start")
        return

    checklists = get_checklists_for_user(user_id)
    if checklists:
        await message.answer(
            "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —á–µ–∫-–ª–∏—Å—Ç—ã:",
            reply_markup=get_checklists_keyboard(checklists),
        )
        await state.set_state(Form.show_checklists)
    else:
        await message.answer("üôÅ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á–µ–∫-–ª–∏—Å—Ç–æ–≤.")


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# üìã –ü–†–û–ô–î–ï–ù–ù–´–ï –ß–ï–ö-–õ–ò–°–¢–´ ‚Äî –ù–û–í–´–ô –ë–õ–û–ö (–≤–º–µ—Å—Ç–æ —Å—Ç–∞—Ä–æ–≥–æ show_completed_checklists)
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

PAGE_LIMIT = 8  # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ 8 –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É

def _build_completed_list_text(items, offset: int) -> str:
    if not items:
        return "–ü–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö —á–µ–∫-–ª–∏—Å—Ç–æ–≤."
    lines = ["–í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —á–µ–∫-–ª–∏—Å—Ç—ã:\n"]
    for i, it in enumerate(items, start=1):
        idx = offset + i  # –≥–ª–æ–±–∞–ª—å–Ω–∞—è –Ω—É–º–µ—Ä–∞—Ü–∏—è: 1..N
        dt = it["submitted_at"].strftime("%d.%m.%Y %H:%M")
        lines.append(f"{idx}. {it['checklist_name']} ‚Äî {dt}")
    return "\n".join(lines)

def _build_completed_list_kb(items, offset: int, total: int) -> InlineKeyboardMarkup:
    kb_rows = []

    # –ö–Ω–æ–ø–∫–∏ —Å –Ω–æ–º–µ—Ä–∞–º–∏ —Ç–µ–∫—É—â–∏—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ (–ø–æ 4 –≤ —Ä—è–¥)
    number_buttons = []
    for i, it in enumerate(items, start=1):
        idx = offset + i
        number_buttons.append(
            InlineKeyboardButton(
                text=str(idx),
                callback_data=f"completed_view:{it['answer_id']}:{offset}"
            )
        )
        if len(number_buttons) == 4:
            kb_rows.append(number_buttons)
            number_buttons = []
    if number_buttons:
        kb_rows.append(number_buttons)

    # –ù–∞–≤–∏–≥–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü (–µ—Å–ª–∏ –≤—Å–µ–≥–æ –±–æ–ª—å—à–µ –ª–∏–º–∏—Ç–∞)
    if total > PAGE_LIMIT:
        nav_row = []
        if offset > 0:
            nav_row.append(
                InlineKeyboardButton(
                    text="‚üµ –ù–∞–∑–∞–¥",
                    callback_data=f"completed_page:{max(0, offset - PAGE_LIMIT)}"
                )
            )
        if offset + PAGE_LIMIT < total:
            nav_row.append(
                InlineKeyboardButton(
                    text="–í–ø–µ—Ä—ë–¥ ‚ü∂",
                    callback_data=f"completed_page:{offset + PAGE_LIMIT}"
                )
            )
        if nav_row:
            kb_rows.append(nav_row)

    return InlineKeyboardMarkup(inline_keyboard=kb_rows)

@router.message((F.text == "üìã –ü—Ä–æ–π–¥–µ–Ω–Ω—ã–µ —á–µ–∫-–ª–∏—Å—Ç—ã") | (F.text == "üìã –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–µ —á–µ–∫-–ª–∏—Å—Ç—ã"))
async def handle_completed_list(message: types.Message, state: FSMContext):
    data = await state.get_data()
    user_id = data.get("user_id")

    if not user_id:
        await message.answer("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è.")
        return

    offset = 0
    items, total = get_completed_answers_paginated(
        user_id=user_id,
        offset=offset,
        limit=PAGE_LIMIT
    )

    if total == 0:
        await message.answer("üïµÔ∏è‚Äç‚ôÇÔ∏è –í—ã –µ—â—ë –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —á–µ–∫-–ª–∏—Å—Ç–∞.")
        return

    text = _build_completed_list_text(items, offset)
    kb = _build_completed_list_kb(items, offset, total)
    await message.answer(text, reply_markup=kb)

@router.callback_query(F.data.startswith("completed_page:"))
async def handle_completed_page(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    user_id = data.get("user_id")

    if not user_id:
        await callback.answer("–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã", show_alert=True)
        return

    try:
        offset = int(callback.data.split(":")[1])
    except Exception:
        offset = 0

    items, total = get_completed_answers_paginated(
        user_id=user_id,
        offset=offset,
        limit=PAGE_LIMIT
    )
    text = _build_completed_list_text(items, offset)
    kb = _build_completed_list_kb(items, offset, total)

    await callback.message.edit_text(text, reply_markup=kb)
    await callback.answer()

@router.callback_query(F.data.startswith("completed_view:"))
async def handle_completed_view(callback: types.CallbackQuery):
    # —Ñ–æ—Ä–º–∞—Ç: completed_view:<answer_id>:<offset>
    parts = callback.data.split(":")
    answer_id = int(parts[1])
    offset = int(parts[2]) if len(parts) > 2 else 0

    data = get_answer_report_data(answer_id)
    if not data:
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ç—á—ë—Ç–∞", show_alert=True)
        return

    res_line = f"\n–†–µ–∑—É–ª—å—Ç–∞—Ç: {data['result']}" if data.get("result") else ""
    text = (
        f"üìã <b>{data['checklist_name']}</b>\n"
        f"–î–∞—Ç–∞: {data['date']}\n"
        f"–í—Ä–µ–º—è: {data['time']}\n"
        f"–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ: {data['department']}{res_line}"
    )

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üìÑ PDF",   callback_data=f"completed_pdf:{answer_id}:{offset}"),
            InlineKeyboardButton(text="üìä Excel", callback_data=f"completed_excel:{answer_id}:{offset}"),
        ],
        [
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data=f"completed_page:{offset}")
        ]
    ])

    await callback.message.edit_text(text, reply_markup=kb, parse_mode="HTML")
    await callback.answer()

@router.callback_query(F.data.startswith("completed_pdf:"))
async def handle_completed_pdf(callback: types.CallbackQuery):
    # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥
    parts = callback.data.split(":")
    answer_id = int(parts[1])
    offset = int(parts[2]) if len(parts) > 2 else 0

    await callback.answer()  # –∑–∞–∫—Ä—ã—Ç—å "—á–∞—Å–∏–∫–∏"
    await callback.message.answer("üìÑ –û—Ç—á—ë—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω! (–¥–µ–º–æ)")
    # –æ—Å—Ç–∞—ë–º—Å—è –Ω–∞ —Ç–µ–∫—É—â–µ–º —ç–∫—Ä–∞–Ω–µ; –≤–æ–∑–≤—Ä–∞—Ç ‚Äî –∫–Ω–æ–ø–∫–æ–π ¬´‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É¬ª

@router.callback_query(F.data.startswith("completed_excel:"))
async def handle_completed_excel(callback: types.CallbackQuery):
    parts = callback.data.split(":")
    answer_id = int(parts[1])
    offset = int(parts[2]) if len(parts) > 2 else 0

    await callback.answer()
    await callback.message.answer("üìä –û—Ç—á—ë—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω! (–¥–µ–º–æ)")
    # –æ—Å—Ç–∞—ë–º—Å—è –Ω–∞ —Ç–µ–∫—É—â–µ–º —ç–∫—Ä–∞–Ω–µ; –≤–æ–∑–≤—Ä–∞—Ç ‚Äî –∫–Ω–æ–ø–∫–æ–π ¬´‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É¬ª


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

@router.message((F.text == "‚ÑπÔ∏è –û–±–æ –º–Ω–µ") | (F.text == "‚ÑπÔ∏è –æ–±–æ –º–Ω–µ"))
async def show_user_info(message: types.Message, state: FSMContext):
    data = await state.get_data()
    user = data.get("user")

    if not user:
        await message.answer("‚ö†Ô∏è –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.")
        return

    text = (
        f"üë§ *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—Å:*\n\n"
        f"*–§–∞–º–∏–ª–∏—è –∏ –ò–º—è:* {user['name']}\n"
        f"*–¢–µ–ª–µ—Ñ–æ–Ω:* {user['phone']}\n"
        f"*–ö–æ–º–ø–∞–Ω–∏—è:* {user.get('company_name', '‚Äî')}\n"
        f"*–î–æ–ª–∂–Ω–æ—Å—Ç—å:* {user.get('position', '‚Äî')}"
    )

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="üìã –ú–µ–Ω—é", callback_data="back_to_menu")]]
    )

    await message.answer(text, parse_mode="Markdown", reply_markup=keyboard)


@router.callback_query(F.data == "back_to_menu")
async def return_to_main_menu(callback: types.CallbackQuery):
    await callback.message.answer("üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=authorized_keyboard)
    await callback.answer()


@router.message((F.text == "üö™ –í—ã–π—Ç–∏") | (F.text == "üö™ –≤—ã–π—Ç–∏"))
async def handle_logout(message: types.Message, state: FSMContext):
    from keyboards.inline import get_start_keyboard

    await state.clear()
    await message.answer("üö™ –í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã.")

    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n–ù–∞–∂–º–∏—Ç–µ *üöÄ –ù–∞—á–∞—Ç—å*, —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ —á–µ–∫-–ª–∏—Å—Ç.\n"
        "–ò–ª–∏ *üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è*, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ.",
        reply_markup=get_start_keyboard(),
        parse_mode="Markdown",
    )
