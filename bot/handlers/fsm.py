# handlers/fsm.py

from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from states import Form
from bot_logic import find_user_by_name_phone_company, get_checklists_for_user
from keyboards.inline import get_identity_confirmation_keyboard, get_checklists_keyboard
from keyboards.reply import authorized_keyboard
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

router = Router()

# üöÄ –ù–∞–∂–∞–ª "–ù–∞—á–∞—Ç—å"
@router.callback_query(F.data == "start_checklist")
async def ask_name(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É *–§–∞–º–∏–ª–∏—é –∏ –ò–º—è*:")
    await state.set_state(Form.entering_name)
    await callback.answer()

# ‚úçÔ∏è –í–≤–æ–¥–∏—Ç –∏–º—è
@router.message(Form.entering_name)
async def ask_phone(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text.strip())
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    await state.set_state(Form.entering_phone)

# ‚òéÔ∏è –í–≤–æ–¥–∏—Ç —Ç–µ–ª–µ—Ñ–æ–Ω ‚Üí –ø—Ä–æ–≤–µ—Ä–∫–∞
@router.message(Form.entering_phone)
async def confirm_user(message: types.Message, state: FSMContext):
    await state.update_data(phone=message.text.strip())
    data = await state.get_data()

    user = find_user_by_name_phone_company(data["name"], data["phone"], company_name=None)
    if user:
        await state.update_data(user_id=user["id"], user=user)
        await state.set_state(Form.show_checklists)

        await message.answer(
            f"üîé –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ:\n\n"
            f"*–§–∞–º–∏–ª–∏—è –∏ –ò–º—è:* {user['name']}\n"
            f"*–¢–µ–ª–µ—Ñ–æ–Ω:* {user['phone']}\n"
            f"*–ö–æ–º–ø–∞–Ω–∏—è:* {user.get('company_name', '‚Äî')}\n"
            f"*–î–æ–ª–∂–Ω–æ—Å—Ç—å:* {user['position']}",
            reply_markup=get_identity_confirmation_keyboard(),
            parse_mode="Markdown"
        )
    else:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.set_state(Form.entering_name)

# ‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ª–∏—á–Ω–æ—Å—Ç–∏
@router.callback_query(F.data == "confirm_identity", Form.show_checklists)
async def identity_approved(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer(
        "‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ. –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ—è–≤–∏–ª–æ—Å—å —Å–Ω–∏–∑—É üëá",
        reply_markup=authorized_keyboard
    )
    await callback.answer()

# ‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ
@router.callback_query(F.data == "reject_identity", Form.show_checklists)
async def identity_rejected(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–ü–æ–ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É *–§–∞–º–∏–ª–∏—é –∏ –ò–º—è*:")
    await state.set_state(Form.entering_name)
    await callback.answer()

# ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–î–æ—Å—Ç—É–ø–Ω—ã–µ —á–µ–∫-–ª–∏—Å—Ç—ã"
@router.message(F.text.lower() == "‚úÖ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —á–µ–∫-–ª–∏—Å—Ç—ã")
async def show_available_checklists(message: types.Message, state: FSMContext):
    data = await state.get_data()
    user_id = data.get("user_id")

    if not user_id:
        await message.answer("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ /start")
        return

    checklists = get_checklists_for_user(user_id)
    if checklists:
        await message.answer(
            "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —á–µ–∫-–ª–∏—Å—Ç—ã:",
            reply_markup=get_checklists_keyboard(checklists)
        )
        await state.set_state(Form.show_checklists)
    else:
        await message.answer("üôÅ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á–µ–∫-–ª–∏—Å—Ç–æ–≤.")

@router.message(F.text.lower() == "üìã –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–µ —á–µ–∫-–ª–∏—Å—Ç—ã")
async def show_completed_checklists(message: types.Message, state: FSMContext):
    from bot_logic import get_completed_checklists_for_user
    data = await state.get_data()
    user_id = data.get("user_id")

    if not user_id:
        await message.answer("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è.")
        return

    checklists = get_completed_checklists_for_user(user_id)

    if not checklists:
        await message.answer("üïµÔ∏è‚Äç‚ôÇÔ∏è –í—ã –µ—â—ë –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —á–µ–∫-–ª–∏—Å—Ç–∞.")
        return

    text = "üìã –ü—Ä–æ–π–¥–µ–Ω–Ω—ã–µ —á–µ–∫-–ª–∏—Å—Ç—ã:\n\n"
    for item in checklists:
        text += f"‚Ä¢ {item['name']} ‚Äî {item['completed_at'].strftime('%d.%m.%Y %H:%M')}\n"

    await message.answer(text)

@router.message(F.text.lower() == "‚ÑπÔ∏è –æ–±–æ –º–Ω–µ")
async def show_user_info(message: types.Message, state: FSMContext):
    data = await state.get_data()
    user = data.get("user")

    if not user:
        await message.answer("‚ö†Ô∏è –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.")
        return

    text = (
        f"üë§ *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—Å:*\n\n"
        f"*–§–∞–º–∏–ª–∏—è –∏ –ò–º—è:* {user['name']}\n"
        f"*–¢–µ–ª–µ—Ñ–æ–Ω:* {user['phone']}\n"
        f"*–ö–æ–º–ø–∞–Ω–∏—è:* {user.get('company_name', '‚Äî')}\n"
        f"*–î–æ–ª–∂–Ω–æ—Å—Ç—å:* {user['position']}"
    )

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìã –ú–µ–Ω—é", callback_data="back_to_menu")]
    ])

    await message.answer(text, parse_mode="Markdown", reply_markup=keyboard)

@router.callback_query(F.data == "back_to_menu")
async def return_to_main_menu(callback: types.CallbackQuery):
    await callback.message.answer("üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=authorized_keyboard)
    await callback.answer()

@router.message(F.text.lower() == "üö™ –≤—ã–π—Ç–∏")
async def handle_logout(message: types.Message, state: FSMContext):
    from keyboards.inline import get_start_keyboard

    await state.clear()
    await message.answer("üö™ –í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã.")

    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n–ù–∞–∂–º–∏—Ç–µ *üöÄ –ù–∞—á–∞—Ç—å*, —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ —á–µ–∫-–ª–∏—Å—Ç.\n–ò–ª–∏ *üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è*, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ.",
        reply_markup=get_start_keyboard(),
        parse_mode="Markdown"
    )
