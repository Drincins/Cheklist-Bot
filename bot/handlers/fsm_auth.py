# handlers/fsm_auth.py ‚Äî –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è, –ø—Ä–æ—Ñ–∏–ª—å, –≤—ã—Ö–æ–¥
import asyncio
import html

from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramBadRequest
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from ..states import Form
from ..services.auth import AuthService                      # ‚Üê —Å–µ—Ä–≤–∏—Å-—Å–ª–æ–π –≤–º–µ—Å—Ç–æ –ø—Ä—è–º—ã—Ö –≤—ã–∑–æ–≤–æ–≤ bot_logic
from ..keyboards.inline import (
    get_identity_confirmation_keyboard,
    get_checklists_keyboard,
)
from ..keyboards.reply import authorized_keyboard

router = Router()
auth_service = AuthService()


def _escape(text: str | None) -> str:
    return html.escape(text or "")


@router.callback_query(F.data == "start_checklist")
async def ask_login(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω:")
    await state.set_state(Form.entering_login)
    await callback.answer()


# ‚úçÔ∏è –í–≤–æ–¥–∏—Ç –ª–æ–≥–∏–Ω
@router.message(Form.entering_login)
async def ask_password(message: types.Message, state: FSMContext):
    await state.update_data(login=message.text.strip())
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å:")
    await state.set_state(Form.entering_password)


# üîê –í–≤–æ–¥–∏—Ç –ø–∞—Ä–æ–ª—å ‚Üí –ø—Ä–æ–≤–µ—Ä–∫–∞
@router.message(Form.entering_password)
async def confirm_user(message: types.Message, state: FSMContext):
    await state.update_data(password=message.text.strip())
    data = await state.get_data()

    login = data.get("login", "").strip()
    password = data.get("password", "")

    user = await asyncio.to_thread(auth_service.authenticate, login, password)

    if user:
        await state.update_data(user_id=user["id"], user=user)
        await state.set_state(Form.awaiting_confirmation)

        # –Ω–µ —Ö—Ä–∞–Ω–∏–º –ø–∞—Ä–æ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(password=None)

        details = (
            "üîé –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ:\n\n"
            f"<b>–°–æ—Ç—Ä—É–¥–Ω–∏–∫:</b> {_escape(user.get('name'))}\n"
            f"<b>–õ–æ–≥–∏–Ω:</b> {_escape(login)}\n"
            f"<b>–ö–æ–º–ø–∞–Ω–∏—è:</b> {_escape(user.get('company_name', '‚Äî'))}\n"
            f"<b>–î–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {_escape(user.get('position', '‚Äî'))}"
        )
        await message.answer(
            details,
            reply_markup=get_identity_confirmation_keyboard(),
            parse_mode="HTML",
        )
    else:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
        await state.update_data(password=None)
        await state.set_state(Form.entering_login)


# ‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ª–∏—á–Ω–æ—Å—Ç–∏
@router.callback_query(F.data == "confirm_identity", Form.awaiting_confirmation)
async def identity_approved(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    user_id = data.get("user_id")

    await callback.message.answer(
        "‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ. –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ—è–≤–∏–ª–æ—Å—å —Å–Ω–∏–∑—É üëá",
        reply_markup=authorized_keyboard,
    )

    # –ü—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –º–æ–∂–Ω–æ —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑–∞—Ç—å —á–µ–∫-–ª–∏—Å—Ç—ã:
    # if user_id:
    #     svc = AuthService()
    #     checklists = svc.get_user_checklists(user_id)
    #     if checklists:
    #         await callback.message.answer(
    #             "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —á–µ–∫-–ª–∏—Å—Ç—ã:",
    #             reply_markup=get_checklists_keyboard(checklists),
    #         )
    #     else:
    #         await callback.message.answer(
    #             "üôÅ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á–µ–∫-–ª–∏—Å—Ç–æ–≤.\n"
    #             "–ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞ ‚Äî –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ —á–µ–∫-–ª–∏—Å—Ç–æ–≤ –Ω–∞ –≤–∞—à—É –¥–æ–ª–∂–Ω–æ—Å—Ç—å."
    #         )

    await state.set_state(Form.show_checklists)
    await callback.answer()


# ‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ
@router.callback_query(F.data == "reject_identity", Form.awaiting_confirmation)
async def identity_rejected(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–ü–æ–ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω:")
    await state.set_state(Form.entering_login)
    await callback.answer()


# ‚ÑπÔ∏è –ü—Ä–æ—Ñ–∏–ª—å
@router.message((F.text == "‚ÑπÔ∏è –û–±–æ –º–Ω–µ") | (F.text == "‚ÑπÔ∏è –æ–±–æ –º–Ω–µ"))
async def show_user_info(message: types.Message, state: FSMContext):
    data = await state.get_data()
    user = data.get("user")

    if not user:
        await message.answer("‚ö†Ô∏è –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.")
        return

    text = (
        "üë§ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—Å:</b>\n\n"
        f"<b>–§–∞–º–∏–ª–∏—è –∏ –ò–º—è:</b> {_escape(user.get('name'))}\n"
        f"<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {_escape(user.get('phone'))}\n"
        f"<b>–ö–æ–º–ø–∞–Ω–∏—è:</b> {_escape(user.get('company_name', '‚Äî'))}\n"
        f"<b>–î–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {_escape(user.get('position', '‚Äî'))}"
    )

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="üìã –ú–µ–Ω—é", callback_data="back_to_menu")]]
    )

    await message.answer(text, parse_mode="HTML", reply_markup=keyboard)


@router.callback_query(F.data == "back_to_menu")
async def return_to_main_menu(callback: types.CallbackQuery):
    await callback.message.answer("üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=authorized_keyboard)
    await callback.answer()


@router.message((F.text == "üö™ –í—ã–π—Ç–∏") | (F.text == "üö™ –≤—ã–π—Ç–∏"))
async def handle_logout(message: types.Message, state: FSMContext):
    # –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç!
    from ..keyboards.inline import get_start_keyboard

    await state.clear()
    await message.answer("üö™ –í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã.")

    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n–ù–∞–∂–º–∏—Ç–µ <b>üöÄ –ù–∞—á–∞—Ç—å</b>, —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ —á–µ–∫-–ª–∏—Å—Ç.\n"
        "–ò–ª–∏ <b>üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è</b>, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ.",
        reply_markup=get_start_keyboard(),
        parse_mode="HTML",
    )
