# handlers/start.py

import asyncio

from aiogram import Router, types, F
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext

from ..keyboards.inline import get_start_keyboard, get_checklists_keyboard
from ..keyboards.reply import authorized_keyboard
from ..services.auth import AuthService

router = Router()  # ‚úÖ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –¥–æ–±–∞–≤–∏—Ç—å

auth_service = AuthService()


async def send_main_menu(message: types.Message):
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é!",
        reply_markup=authorized_keyboard
    )

@router.message(CommandStart())
async def handle_start(message: types.Message, state: FSMContext):
    data = await state.get_data()
    user_id = data.get("user_id")

    if user_id:
        checklists = await asyncio.to_thread(auth_service.get_user_checklists, user_id)
        await send_main_menu(message)
        if checklists:
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —á–µ–∫-–ª–∏—Å—Ç:", reply_markup=get_checklists_keyboard(checklists))
        else:
            await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á–µ–∫-–ª–∏—Å—Ç–æ–≤.")
        return

    # –î–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ ‚Äî —Ç–æ–ª—å–∫–æ inline-–∫–Ω–æ–ø–∫–∏
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Å–µ—Ä–≤–∏—Å –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —á–µ–∫-–ª–∏—Å—Ç–æ–≤. –í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å:",
        reply_markup=get_start_keyboard()
    )


@router.message(F.text == "üè† –î–æ–º–æ–π")
async def handle_home(message: types.Message, state: FSMContext):
    data = await state.get_data()
    user_id = data.get("user_id")
    if not user_id:
        await message.answer("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ /start", reply_markup=get_start_keyboard())
        return

    await send_main_menu(message)
