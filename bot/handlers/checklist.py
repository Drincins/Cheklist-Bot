from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from ..states import Form
from ..bot_logic import (
    get_checklists_for_user,
    get_questions_for_checklist,
    save_checklist_with_answers,
    get_checklist_by_id,
)
from ..keyboards.inline import get_checklists_keyboard
from ..keyboards.reply import authorized_keyboard

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove
import asyncio

router = Router()

@router.message(F.text.startswith("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å"), Form.entering_phone)
async def show_checklists(message: types.Message, state: FSMContext):
    data = await state.get_data()
    checklists = get_checklists_for_user(data["user_id"])
    if not checklists:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á–µ–∫-–ª–∏—Å—Ç–æ–≤.")
        return
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —á–µ–∫-–ª–∏—Å—Ç –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è:", reply_markup=get_checklists_keyboard(checklists))
    await state.set_state(Form.show_checklists)

@router.callback_query(F.data.startswith("checklist:"), Form.show_checklists)
async def start_checklist(callback: types.CallbackQuery, state: FSMContext):
    checklist_id = int(callback.data.split(":")[1])
    questions = get_questions_for_checklist(checklist_id)
    if not questions:
        await callback.message.answer("–£ —ç—Ç–æ–≥–æ —á–µ–∫-–ª–∏—Å—Ç–∞ –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤.")
        await callback.answer()
        return

    # answers_map: question_id -> {"answer": None|str, "comment": None|str, "photo_path": None|str}
    answers_map = {}

    await state.update_data(
        checklist_id=checklist_id,
        questions=questions,
        current=0,
        answers_map=answers_map,
    )

    # üîΩ –°–∫—Ä—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await callback.message.answer("üìù –ù–∞—á–∏–Ω–∞–µ–º —á–µ–∫-–ª–∏—Å—Ç...", reply_markup=ReplyKeyboardRemove())

    await ask_next_question(callback.message, state)   # –ù–ï –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∏–º current –∑–¥–µ—Å—å
    await state.set_state(Form.answering_question)
    await callback.answer()

def _question_text(question: dict, draft: dict) -> str:
    """–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ + –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
    extra = []
    if draft.get("answer") is not None:
        extra.append(f"üü© –û—Ç–≤–µ—Ç: *{draft['answer']}*")
    if draft.get("comment"):
        extra.append("üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω")
    if draft.get("photo_path"):
        extra.append("üì∑ –§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ")
    suffix = ("\n\n" + "\n".join(extra)) if extra else ""
    return f"{question['text']}{suffix}"

def _answers_summary_text(questions: list[dict], answers_map: dict) -> str:
    lines = ["üóÇ *–í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã:*\n"]
    yes_total = yes_cnt = 0
    scale_vals = []

    for q in questions:
        d = answers_map.get(q["id"], {})
        a = d.get("answer")
        lines.append(f"‚Äî {q['text']}: *{a if a is not None else '‚Äî'}*")
        # –ø—Ä–æ—Å—Ç–∞—è –º–µ—Ç—Ä–∏–∫–∞
        if q["type"] == "yesno":
            yes_total += 1
            if str(a).lower() == "yes":
                yes_cnt += 1
        elif q["type"] == "scale" and a is not None:
            try:
                scale_vals.append(float(a))
            except Exception:
                pass

    parts = []
    if yes_total:
        parts.append(f"{round(100*yes_cnt/yes_total)}% ¬´–¥–∞¬ª")
    if scale_vals:
        # —à–∫–∞–ª–∞ 1..5 ‚Üí % –æ—Ç –º–∞–∫—Å–∏–º—É–º–∞
        parts.append(f"{round(100*(sum(scale_vals)/len(scale_vals))/5)}% —à–∫–∞–ª–∞")
    if parts:
        lines.append("\nüìä –ò—Ç–æ–≥: " + " / ".join(parts))

    return "\n".join(lines)

def build_question_keyboard(question_type: str, current: int, selected: str | None = None) -> InlineKeyboardMarkup:
    """–û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º –≤–æ–ø—Ä–æ—Å–∞ (–æ—Ç–≤–µ—Ç/–∫–æ–º–º–µ–Ω—Ç/—Ñ–æ—Ç–æ/–¥–∞–ª–µ–µ + –Ω–∞–∑–∞–¥ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É)."""
    def mark(label: str, key: str) -> str:
        # –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è –º–µ—Ç–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ
        return f"‚Ä¢ {label}" if selected == key else label

    rows = []
    if question_type == "yesno":
        rows.append([
            InlineKeyboardButton(text=mark("‚úÖ –î–∞",  "yes"), callback_data="answer:yes"),
            InlineKeyboardButton(text=mark("‚ùå –ù–µ—Ç", "no"),  callback_data="answer:no"),
        ])
    elif question_type == "scale":
        rows.append([InlineKeyboardButton(text=mark(str(i), str(i)), callback_data=f"answer:{i}") for i in range(1, 6)])
    else:
        rows.append([InlineKeyboardButton(text=mark("‚úçÔ∏è –í–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç", "text"), callback_data="answer:text")])

    rows.append([
        InlineKeyboardButton(text="üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", callback_data=f"comment:{current}"),
        InlineKeyboardButton(text="üì∑ –§–æ—Ç–æ",        callback_data=f"photo:{current}"),
    ])
    rows.append([
        InlineKeyboardButton(text="‚û°Ô∏è –î–∞–ª–µ–µ", callback_data="continue_after_extra"),
    ])
    # –Ω–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞ –≤ —Å–∞–º–æ–º –Ω–∏–∑—É
    rows.append([
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É", callback_data="prev_question"),
    ])
    return InlineKeyboardMarkup(inline_keyboard=rows)

def build_submode_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥—Ä–µ–∂–∏–º–æ–≤ (–≤–≤–æ–¥ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è/—Ñ–æ—Ç–æ)."""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤–æ–ø—Ä–æ—Å—É", callback_data="back_to_question")]
    ])



async def ask_next_question(message: types.Message, state: FSMContext):
    data = await state.get_data()
    questions = data["questions"]
    current = data["current"]
    answers_map = data.get("answers_map", {})
    q_msg_id = data.get("q_msg_id")

    # –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
    if current >= len(questions):
        formatted_answers = []
        for q in questions:
            d = answers_map.get(q["id"], {})
            formatted_answers.append({
                "question_id": q["id"],
                "response_value": d.get("answer"),
                "comment": d.get("comment"),
                "photo_path": d.get("photo_path"),
            })
        await asyncio.to_thread(
            save_checklist_with_answers,
            user_id=data["user_id"],
            checklist_id=data["checklist_id"],
            answers=formatted_answers
        )
        await message.answer("‚úÖ –ß–µ–∫-–ª–∏—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω. –°–ø–∞—Å–∏–±–æ!")

        next_kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìÑ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–≤–µ—Ç—ã", callback_data="show_answers_here")],
            [InlineKeyboardButton(text="‚û°Ô∏è –î–∞–ª–µ–µ", callback_data="checklist_continue")],
        ])
        nxt = await message.answer("–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=next_kb)
        await state.update_data(next_actions_msg_id=nxt.message_id)
        await state.set_state(Form.show_checklists)
        return


    # –ø–æ–∫–∞–∑–∞—Ç—å/–ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∞—Ç—å —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å
    question = questions[current]
    qid = question["id"]
    draft = answers_map.setdefault(qid, {"answer": None, "comment": None, "photo_path": None})
    await state.update_data(answers_map=answers_map)

    text = _question_text(question, draft)

    # –∫–∞–∫–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –ø–æ–¥—Å–≤–µ—Ç–∏—Ç—å —Ç–æ—á–∫–æ–π
    qtype = question["type"]
    if qtype in ("yesno", "scale"):
        selected_key = draft.get("answer")               # 'yes'/'no' –∏–ª–∏ '1'..'5'
    else:
        selected_key = "text" if draft.get("answer") is not None else None

    kb = build_question_keyboard(qtype, current, selected=selected_key)

    if q_msg_id:
        await message.bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=q_msg_id,
            text=text,
            parse_mode="Markdown"
        )
        await message.bot.edit_message_reply_markup(
            chat_id=message.chat.id,
            message_id=q_msg_id,
            reply_markup=kb
        )
    else:
        sent = await message.answer(text, reply_markup=kb, parse_mode="Markdown")
        await state.update_data(q_msg_id=sent.message_id)




@router.callback_query(F.data.startswith("answer:"), Form.answering_question)
async def handle_answer(callback: types.CallbackQuery, state: FSMContext):
    value = callback.data.split(":")[1]  # 'yes'/'no' | '1'..'5' | 'text'
    data = await state.get_data()
    questions = data["questions"]
    current = data["current"]
    answers_map = data.get("answers_map", {})
    q_msg_id = data.get("q_msg_id")

    question = questions[current]
    qid = question["id"]

    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç ‚Äî –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ä–µ–∂–∏–º –≤–≤–æ–¥–∞, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É—è —Ç–æ –∂–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if value == "text":
        await state.set_state(Form.manual_text_answer)
        await callback.bot.edit_message_text(
            chat_id=callback.message.chat.id,
            message_id=q_msg_id or callback.message.message_id,
            text="‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç —Ç–µ–∫—Å—Ç–æ–º:",
        )
        await callback.bot.edit_message_reply_markup(
            chat_id=callback.message.chat.id,
            message_id=q_msg_id or callback.message.message_id,
            reply_markup=build_submode_keyboard()
        )
        await callback.answer()
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –≤ —á–µ—Ä–Ω–æ–≤–∏–∫ (yes/no/scale)
    draft = answers_map.setdefault(qid, {"answer": None, "comment": None, "photo_path": None})
    draft["answer"] = value
    answers_map[qid] = draft
    await state.update_data(answers_map=answers_map)

    # –ü–æ–¥—Å–≤–µ—Ç–∏–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–Ω–æ–ø–∫—É ¬´—Å–µ—Ä–æ–π —Ç–æ—á–∫–æ–π¬ª –≤ —Ç–æ–π –∂–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ
    kb = build_question_keyboard(question["type"], current, selected=value)
    await callback.bot.edit_message_reply_markup(
        chat_id=callback.message.chat.id,
        message_id=q_msg_id or callback.message.message_id,
        reply_markup=kb
    )
    await callback.answer("–û—Ç–≤–µ—Ç –∑–∞–ø–∏—Å–∞–Ω. –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π/—Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∂–∞—Ç—å ¬´–î–∞–ª–µ–µ¬ª.")

# helper ‚Äî —Ç–∏—Ö–æ —É–¥–∞–ª—è–µ–º –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
async def _safe_delete(msg: types.Message):
    try:
        await msg.delete()
    except Exception:
        pass



@router.message(Form.manual_text_answer)
async def handle_manual_text_answer(message: types.Message, state: FSMContext):
    data = await state.get_data()
    questions = data["questions"]; current = data["current"]
    answers_map = data.get("answers_map", {})
    qid = questions[current]["id"]

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
    answers_map.setdefault(qid, {"answer": None, "comment": None, "photo_path": None})["answer"] = message.text.strip()
    await state.update_data(answers_map=answers_map)

    # —É–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –≤–æ–ø—Ä–æ—Å –æ—Å—Ç–∞–ª—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–º
    await _safe_delete(message)

    # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ —Ä–µ–∂–∏–º –≤–æ–ø—Ä–æ—Å–∞ –∏ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –µ–¥–∏–Ω—ã–π —ç–∫—Ä–∞–Ω
    await state.set_state(Form.answering_question)
    await ask_next_question(message, state)



@router.callback_query(F.data.startswith("comment:"), Form.answering_question)
async def handle_comment_button(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    q_msg_id = data.get("q_msg_id")
    await state.set_state(Form.adding_comment)
    await state.update_data(submode="comment")

    await callback.bot.edit_message_text(
        chat_id=callback.message.chat.id,
        message_id=q_msg_id or callback.message.message_id,
        text="üí¨ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:",
    )
    await callback.bot.edit_message_reply_markup(
        chat_id=callback.message.chat.id,
        message_id=q_msg_id or callback.message.message_id,
        reply_markup=build_submode_keyboard()
    )
    await callback.answer()

@router.message(Form.adding_comment)
async def handle_comment_text(message: types.Message, state: FSMContext):
    data = await state.get_data()
    questions = data["questions"]; current = data["current"]
    answers_map = data.get("answers_map", {})

    qid = questions[current]["id"]
    answers_map.setdefault(qid, {"answer": None, "comment": None, "photo_path": None})["comment"] = message.text.strip()
    await state.update_data(answers_map=answers_map)

    # —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º, —á—Ç–æ–±—ã –≤–æ–ø—Ä–æ—Å –æ—Å—Ç–∞–ª—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–º
    await _safe_delete(message)

    # –≤–µ—Ä–Ω—É—Ç—å —ç–∫—Ä–∞–Ω –≤–æ–ø—Ä–æ—Å–∞
    await state.set_state(Form.answering_question)
    await ask_next_question(message, state)

@router.callback_query(F.data.startswith("photo:"), Form.answering_question)
async def handle_photo_button(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    q_msg_id = data.get("q_msg_id")
    await state.set_state(Form.adding_photo)

    await callback.bot.edit_message_text(
        chat_id=callback.message.chat.id,
        message_id=q_msg_id or callback.message.message_id,
        text="üì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ:",
    )
    await callback.bot.edit_message_reply_markup(
        chat_id=callback.message.chat.id,
        message_id=q_msg_id or callback.message.message_id,
        reply_markup=build_submode_keyboard()
    )
    await callback.answer()

@router.message(Form.adding_photo)
async def handle_photo_input(message: types.Message, state: FSMContext):
    if not message.photo:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ.")
        return

    data = await state.get_data()
    questions = data["questions"]; current = data["current"]
    answers_map = data.get("answers_map", {})
    qid = questions[current]["id"]

    answers_map.setdefault(qid, {"answer": None, "comment": None, "photo_path": None})["photo_path"] = message.photo[-1].file_id
    await state.update_data(answers_map=answers_map)

    # —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ
    await _safe_delete(message)

    # –≤–µ—Ä–Ω—É—Ç—å —ç–∫—Ä–∞–Ω –≤–æ–ø—Ä–æ—Å–∞
    await state.set_state(Form.answering_question)
    await ask_next_question(message, state)


@router.callback_query(F.data == "back_to_question")
async def handle_back_to_question(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(Form.answering_question)
    await ask_next_question(callback.message, state)
    await callback.answer()

@router.callback_query(F.data == "continue_after_extra")
async def handle_continue_after_extra(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    questions = data["questions"]
    current = data["current"]
    answers_map = data.get("answers_map", {})
    q_msg_id = data.get("q_msg_id")

    # 1) –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –µ—Å—Ç—å
    qid = questions[current]["id"]
    has_answer = answers_map.get(qid, {}).get("answer") is not None
    if not has_answer:
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å.", show_alert=True)
        return

    # 2) –û—Ç–∫–ª—é—á–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞, —á—Ç–æ–±—ã –ø–æ –Ω–µ–π –Ω–µ —Ç—ã–∫–∞–ª–∏
    try:
        if q_msg_id:
            await callback.bot.edit_message_reply_markup(
                chat_id=callback.message.chat.id,
                message_id=q_msg_id,
                reply_markup=None
            )
    except Exception:
        pass

    # 3) –î–≤–∏–≥–∞–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å, –æ—á–∏—â–∞–µ–º q_msg_id (–¥–∞–ª—å—à–µ –±—É–¥–µ—Ç –Ω–æ–≤–æ–µ/–¥—Ä—É–≥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
    new_current = current + 1
    await state.update_data(current=new_current, q_msg_id=None)

    # 4) –ü–µ—Ä–µ—Ö–æ–¥–∏–º –¥–∞–ª—å—à–µ (ask_next_question —Å–∞–º –∑–∞–≤–µ—Ä—à–∏—Ç —á–µ–∫-–ª–∏—Å—Ç, –µ—Å–ª–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –±–æ–ª—å—à–µ –Ω–µ—Ç)
    await ask_next_question(callback.message, state)
    await callback.answer()

@router.callback_query(F.data == "prev_question", Form.answering_question)
async def handle_prev_question(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    current = data["current"]
    if current <= 0:
        await callback.answer("–≠—Ç–æ –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å.", show_alert=True)
        return
    await state.update_data(current=current - 1)
    await ask_next_question(callback.message, state)
    await callback.answer()


@router.callback_query(F.data == "comment:same")
async def handle_comment_same(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(Form.adding_comment)
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_question")]
    ])
    await callback.message.answer("üí¨ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:", reply_markup=keyboard)
    await callback.answer()

@router.callback_query(F.data == "photo:same")
async def handle_photo_same(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(Form.adding_photo)
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_question")]
    ])
    await callback.message.answer("üì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ:", reply_markup=keyboard)
    await callback.answer()

@router.callback_query(F.data.startswith("hint:"))
async def handle_hint(callback: types.CallbackQuery):
    await callback.answer("‚ÑπÔ∏è –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ø–æ—è—Å–Ω–µ–Ω–∏–µ –∫ –≤–æ–ø—Ä–æ—Å—É.", show_alert=True)


@router.callback_query(F.data == "show_details")
async def handle_show_details(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    questions = data["questions"]
    answers_map = data.get("answers_map", {})

    text = "üîç –ü–æ–¥—Ä–æ–±–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã:\n\n"
    for q in questions:
        d = answers_map.get(q["id"], {})
        ans = d.get("answer")
        comment = d.get("comment")
        photo = "–µ—Å—Ç—å" if d.get("photo_path") else "–Ω–µ—Ç"
        text += f"‚Äî {q['text']}: *{ans if ans is not None else '‚Äî'}*  | üí¨ {comment or '‚Äî'} | üì∑ {photo}\n"

    await callback.message.answer(text, parse_mode="Markdown")
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚û°Ô∏è –î–∞–ª–µ–µ", callback_data="checklist_continue")]
    ])
    await callback.message.answer("–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=keyboard)
    await callback.answer()


@router.callback_query(F.data == "show_answers_here")
async def handle_show_answers_here(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    msg_id = data.get("next_actions_msg_id")
    questions = data.get("questions", [])
    answers_map = data.get("answers_map", {})

    text = _answers_summary_text(questions, answers_map)

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_next_actions")],
    ])

    if msg_id:
        await callback.bot.edit_message_text(
            chat_id=callback.message.chat.id,
            message_id=msg_id,
            text=text,
            parse_mode="Markdown"
        )
        await callback.bot.edit_message_reply_markup(
            chat_id=callback.message.chat.id,
            message_id=msg_id,
            reply_markup=kb
        )
    else:
        # –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç, –µ—Å–ª–∏ msg_id –ø–æ—Ç–µ—Ä—è–ª–∏
        await callback.message.answer(text, parse_mode="Markdown", reply_markup=kb)

    await callback.answer()

@router.callback_query(F.data == "back_to_next_actions")
async def handle_back_to_next_actions(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    msg_id = data.get("next_actions_msg_id")

    next_kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìÑ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–≤–µ—Ç—ã", callback_data="show_answers_here")],
        [InlineKeyboardButton(text="‚û°Ô∏è –î–∞–ª–µ–µ",              callback_data="checklist_continue")],
    ])

    if msg_id:
        await callback.bot.edit_message_text(
            chat_id=callback.message.chat.id,
            message_id=msg_id,
            text="–ß—Ç–æ –¥–∞–ª—å—à–µ?"
        )
        await callback.bot.edit_message_reply_markup(
            chat_id=callback.message.chat.id,
            message_id=msg_id,
            reply_markup=next_kb
        )
    else:
        await callback.message.answer("–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=next_kb)

    await callback.answer()


@router.callback_query(F.data == "checklist_continue")
async def handle_continue(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer(
        "üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=authorized_keyboard
    )
    await callback.answer()


