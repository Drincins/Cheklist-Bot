# handlers/fsm_completed.py ‚Äî –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–µ —á–µ–∫-–ª–∏—Å—Ç—ã, –æ—Ç—á—ë—Ç—ã
import os

from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.types import (
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    FSInputFile,
)

from ..services.completed import CompletedService         # —Å–µ—Ä–≤–∏—Å –≤–º–µ—Å—Ç–æ –ø—Ä—è–º—ã—Ö –≤—ã–∑–æ–≤–æ–≤ bot_logic
from ..export import export_attempt_to_files
from ..utils.media import hydrate_photos_for_attempt      # –≤—ã–Ω–µ—Å–µ–Ω–Ω—ã–π —Ö–µ–ª–ø–µ—Ä

router = Router()

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# üìã –ü–†–û–ô–î–ï–ù–ù–´–ï –ß–ï–ö-–õ–ò–°–¢–´
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

PAGE_LIMIT = 8  # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ 8 –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É


def _build_completed_list_text(items, offset: int) -> str:
    if not items:
        return "–ü–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö —á–µ–∫-–ª–∏—Å—Ç–æ–≤."
    lines = ["–í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —á–µ–∫-–ª–∏—Å—Ç—ã:\n"]
    for i, it in enumerate(items, start=1):
        idx = offset + i  # –≥–ª–æ–±–∞–ª—å–Ω–∞—è –Ω—É–º–µ—Ä–∞—Ü–∏—è: 1..N
        dt = it["submitted_at"].strftime("%d.%m.%Y %H:%M")
        lines.append(f"{idx}. {it['checklist_name']} ‚Äî {dt}")
    return "\n".join(lines)


def _build_completed_list_kb(items, offset: int, total: int) -> InlineKeyboardMarkup:
    kb_rows = []

    # –ö–Ω–æ–ø–∫–∏ —Å –Ω–æ–º–µ—Ä–∞–º–∏ —Ç–µ–∫—É—â–∏—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ (–ø–æ 4 –≤ —Ä—è–¥)
    number_buttons = []
    for i, it in enumerate(items, start=1):
        idx = offset + i
        number_buttons.append(
            InlineKeyboardButton(
                text=str(idx),
                callback_data=f"completed_view:{it['answer_id']}:{offset}",
            )
        )
        if len(number_buttons) == 4:
            kb_rows.append(number_buttons)
            number_buttons = []
    if number_buttons:
        kb_rows.append(number_buttons)

    # –ù–∞–≤–∏–≥–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü (–µ—Å–ª–∏ –≤—Å–µ–≥–æ –±–æ–ª—å—à–µ –ª–∏–º–∏—Ç–∞)
    if total > PAGE_LIMIT:
        nav_row = []
        if offset > 0:
            nav_row.append(
                InlineKeyboardButton(
                    text="‚üµ –ù–∞–∑–∞–¥",
                    callback_data=f"completed_page:{max(0, offset - PAGE_LIMIT)}",
                )
            )
        if offset + PAGE_LIMIT < total:
            nav_row.append(
                InlineKeyboardButton(
                    text="–í–ø–µ—Ä—ë–¥ ‚ü∂",
                    callback_data=f"completed_page:{offset + PAGE_LIMIT}",
                )
            )
        if nav_row:
            kb_rows.append(nav_row)

    return InlineKeyboardMarkup(inline_keyboard=kb_rows)


@router.message((F.text == "üìã –ü—Ä–æ–π–¥–µ–Ω–Ω—ã–µ —á–µ–∫-–ª–∏—Å—Ç—ã") | (F.text == "üìã –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–µ —á–µ–∫-–ª–∏—Å—Ç—ã"))
async def handle_completed_list(message: types.Message, state: FSMContext):
    data = await state.get_data()
    user_id = data.get("user_id")

    if not user_id:
        await message.answer("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è.")
        return

    offset = 0
    svc = CompletedService()
    items, total = svc.get_paginated(user_id=user_id, offset=offset, limit=PAGE_LIMIT)

    if total == 0:
        await message.answer("üïµÔ∏è‚Äç‚ôÇÔ∏è –í—ã –µ—â—ë –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —á–µ–∫-–ª–∏—Å—Ç–∞.")
        return

    text = _build_completed_list_text(items, offset)
    kb = _build_completed_list_kb(items, offset, total)
    await message.answer(text, reply_markup=kb)


@router.callback_query(F.data.startswith("completed_page:"))
async def handle_completed_page(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    user_id = data.get("user_id")

    if not user_id:
        await callback.answer("–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã", show_alert=True)
        return

    try:
        offset = int(callback.data.split(":")[1])
    except Exception:
        offset = 0

    svc = CompletedService()
    items, total = svc.get_paginated(user_id=user_id, offset=offset, limit=PAGE_LIMIT)

    text = _build_completed_list_text(items, offset)
    kb = _build_completed_list_kb(items, offset, total)

    await callback.message.edit_text(text, reply_markup=kb)
    await callback.answer()


@router.callback_query(F.data.startswith("completed_view:"))
async def handle_completed_view(callback: types.CallbackQuery):
    # —Ñ–æ—Ä–º–∞—Ç: completed_view:<answer_id>:<offset>
    parts = callback.data.split(":")
    answer_id = int(parts[1])
    offset = int(parts[2]) if len(parts) > 2 else 0

    svc = CompletedService()
    preview = svc.get_report_preview(answer_id)
    if not preview:
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ç—á—ë—Ç–∞", show_alert=True)
        return

    res_line = f"\n–†–µ–∑—É–ª—å—Ç–∞—Ç: {preview['result']}" if preview.get("result") else ""
    text = (
        f"üìã <b>{preview['checklist_name']}</b>\n"
        f"–î–∞—Ç–∞: {preview['date']}\n"
        f"–í—Ä–µ–º—è: {preview['time']}\n"
        f"–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ: {preview['department']}{res_line}"
    )

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üìÑ PDF", callback_data=f"completed_pdf:{answer_id}:{offset}"),
                InlineKeyboardButton(text="üìä Excel", callback_data=f"completed_excel:{answer_id}:{offset}"),
            ],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data=f"completed_page:{offset}")],
        ]
    )

    await callback.message.edit_text(text, reply_markup=kb, parse_mode="HTML")
    await callback.answer()


@router.callback_query(F.data.startswith("completed_pdf:"))
async def handle_completed_pdf(callback: types.CallbackQuery):
    # —Ñ–æ—Ä–º–∞—Ç: completed_pdf:<answer_id>:<offset>
    parts = callback.data.split(":")
    answer_id = int(parts[1])
    # offset = int(parts[2]) if len(parts) > 2 else 0  # –µ—Å–ª–∏ –Ω—É–∂–Ω–æ ‚Äî –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å

    await callback.answer()  # –∑–∞–∫—Ä—ã—Ç—å ¬´—á–∞—Å–∏–∫–∏¬ª

    # 1) –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –∏–∑ –ë–î
    svc = CompletedService()
    data = svc.get_attempt(answer_id)

    # üîπ –ó–ê–ì–†–£–ñ–ê–ï–ú/–ü–†–ò–í–û–î–ò–ú –§–û–¢–û –ö –õ–û–ö–ê–õ–¨–ù–´–ú –ü–£–¢–Ø–ú
    await hydrate_photos_for_attempt(data, callback.bot)

    # 2) –ì–µ–Ω–µ—Ä–∏–º —Ñ–∞–π–ª—ã (PDF + XLSX), –Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–º —Ç–æ–ª—å–∫–æ PDF
    pdf_path, xlsx_path = export_attempt_to_files(tmp_dir=None, data=data)

    try:
        # 3) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PDF
        await callback.message.answer_document(
            FSInputFile(pdf_path),
            caption=f"üìÑ –û—Ç—á—ë—Ç PDF ‚Äî {data.checklist_name}\n{data.user_name} ¬∑ {data.submitted_at:%d.%m.%Y %H:%M}",
        )
    finally:
        # 4) –ß–∏—Å—Ç–∏–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        for p in (pdf_path, xlsx_path):
            try:
                if os.path.exists(p):
                    os.remove(p)
            except Exception:
                pass


@router.callback_query(F.data.startswith("completed_excel:"))
async def handle_completed_excel(callback: types.CallbackQuery):
    # —Ñ–æ—Ä–º–∞—Ç: completed_excel:<answer_id>:<offset>
    parts = callback.data.split(":")
    answer_id = int(parts[1])
    # offset = int(parts[2]) if len(parts) > 2 else 0

    await callback.answer()

    svc = CompletedService()
    data = svc.get_attempt(answer_id)

    # üîπ –ó–ê–ì–†–£–ñ–ê–ï–ú/–ü–†–ò–í–û–î–ò–ú –§–û–¢–û –ö –õ–û–ö–ê–õ–¨–ù–´–ú –ü–£–¢–Ø–ú
    await hydrate_photos_for_attempt(data, callback.bot)

    pdf_path, xlsx_path = export_attempt_to_files(tmp_dir=None, data=data)

    try:
        await callback.message.answer_document(
            FSInputFile(xlsx_path),
            caption=f"üìä –û—Ç—á—ë—Ç Excel ‚Äî {data.checklist_name}\n{data.user_name} ¬∑ {data.submitted_at:%d.%m.%Y %H:%M}",
        )
    finally:
        for p in (pdf_path, xlsx_path):
            try:
                if os.path.exists(p):
                    os.remove(p)
            except Exception:
                pass
